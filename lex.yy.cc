#line 2 "lex.yy.cc"

#line 4 "lex.yy.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE yylex.
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

#define yywrap() (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

#define YY_FLEX_LEX_COMPAT
extern int yylineno;
int yylineno = 1;

extern char yytext[];

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	if ( yyleng >= YYLMAX ) \
		YY_FATAL_ERROR( "token too large, exceeds YYLMAX" ); \
	yy_flex_strncpy( yytext, (yytext_ptr), yyleng + 1 ); \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 23
#define YY_END_OF_BUFFER 24
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[452] =
    {   0,
        8,    8,   24,   22,    2,    1,   22,   22,    7,   22,
       22,    5,    3,   21,   22,   22,    6,   13,   22,   22,
       22,    0,   21,   22,    0,   20,   22,   22,    0,   21,
       22,   22,   22,   11,    0,    9,    4,   21,   21,   21,
       21,   21,   21,   21,   22,    0,   22,   22,    0,   21,
       19,   22,    0,   13,   13,   13,   13,   13,   13,   22,
       22,    0,   21,    0,   18,   20,   22,   20,   22,    0,
       21,    0,   18,   20,   20,   21,   21,   20,   21,   21,
       21,   21,   22,    0,   19,   22,    0,   21,   22,   22,
       22,   22,   18,   21,   18,   10,   21,   21,   21,   21,

       21,   21,   18,   19,   22,   22,    0,   21,   19,    0,
       18,   19,   21,   19,   21,   21,   21,   21,   19,   21,
       22,   18,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   18,   18,   18,   18,   18,   20,
       18,   20,   21,   18,   21,   20,   21,   21,   21,   21,
       18,   20,   18,   18,   18,   18,   18,   18,   18,   20,
       21,   20,   20,   19,   19,   19,   21,   21,   19,   21,
       21,   21,   21,   16,   14,   15,   17,   21,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,   18,   21,
       19,   18,   21,   21,   21,   21,   19,   21,   18,   19,

       18,   18,   18,   18,   18,   18,   18,   21,   19,   19,
       19,   22,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   18,   18,
       18,   18,   18,   18,   20,   21,   18,   18,   18,   20,
       18,   20,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   21,   19,   19,   18,
       18,   18,   18,   18,   21,   19,   18,   18,   18,   19,
       18,   19,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   22,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   22,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   12,   13,   13,   13,   13,   13,   13,   13,   12,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    1,    7,    1,    8,    1,    9,
       10,    1,    1,    1,    1,   11,    1,    1,    1,   12,
        1,    1,    1,    1,    1,    1,    1,    1,    1,   13,
        1,   14,   15,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,   16,    1,    1,   17,   18,    1,    1,   19,    1,

       20,    1,    1,    1,    1,    1,    1,    1,    1,    1,
       21,    1,    1,   22,   23,    1,   24,    1,    1,    1,
        1,    1,   25,   26,   27,   28,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[29] =
    {   0,
        1,    2,    3,    4,    1,    1,    1,    1,    1,    1,
        5,    1,    1,    6,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    7,    1,    1
    } ;

static const flex_int16_t yy_base[688] =
    {   0,
        0,    0,  288,   22, 7098, 7098,   46,   66,   21,   24,
       26,   30,   85,  104,  129,   33,   34,  149,   36,  165,
        0,  265,   52,  191,  274,   58,  216,  242,  267,  292,
      317,  339,   60,  250,   68,  245,   48,   74,   91,  356,
       18,   87,   98,    0,  382,  229,  407,  433,  458,  483,
       97,  114,  214,  135,  499,   55,  116,  156,    0,  173,
       62,  142,  516,  209,  173, 7098,  542,  189,  568,  594,
      620,  146,  646,    0,  203,  671,  696,  187,  721,  746,
        0,  160,  771,  205,    0,  796,  821,  846,  868,  173,
      159,  158,   82,  198,  200,  167,  212,    0,  207,  224,

        0,  150,  238, 7098,  894,  920,  946,  972,  130,  235,
      998,    0, 1023,  125, 1048, 1073, 1098, 1123,  244,  227,
      263,    0, 1139,  249,  273, 1156,  108,  276,  256,  296,
      102,  275,  300,    0, 1177,  310, 1197, 1217,  112,  311,
     1242,  331, 1267, 1293, 1318,    0, 1344, 1370, 1396,  358,
     1422,  107,  206, 1447, 1467, 1492, 1517, 1542, 1567,  304,
     1591,  145,    0,  115, 1616, 1641, 1666, 1691, 1716, 1741,
     1766,    0,  255,  119,  288,  298,  327,  352,  364, 1786,
      283,    0,    0,  362,    0,    0,  334,  347, 1811, 1836,
      378, 1862, 1887, 1913, 1939, 1965,    0,  395, 1991,   70,

      399, 2016, 2041, 2066, 2091,    0, 2116, 2140,  403,  325,
        0,  396,  402,  415,  427, 2156,  413,  438, 2173,   43,
      441,    0, 2194,  454, 2214, 2234,  370,  447, 2254, 2275,
     2296, 2317,  423,  463,  455, 2343, 2369, 2389, 2414,  418,
     2439,   10,  489, 2464, 2484, 2509,    0, 2534, 2559,  395,
     2583, 2609, 2635, 2661, 2687, 2713, 2738, 2763,  488, 2783,
     2803, 2824,  479,  493, 2850,  512, 2876, 2901, 2921,  494,
     2946,    7,  527, 2971, 2996,    0, 3021, 3041, 3066,  399,
     3090, 3116, 3142, 3168, 3194,  541,  524,  538, 3215,  488,
        0, 3235,  552,    0, 3255,  471, 3275, 3296, 3317, 3338,

      509, 3359, 3380, 3401, 3422, 3443,  540, 3464, 3484,  566,
     3505, 3526,    0, 3547,    0, 3568,    0,    0,  556,    0,
      572,  564, 3589, 3614, 3639,  602,  568, 3665, 3691, 3717,
        0, 3743, 3769, 3795, 3821, 3847, 3873,    0, 3898, 3924,
        0, 3949, 3975, 4001, 4026,    0,    0, 4052,    0,    0,
     4078, 4104,  577, 4129, 4155,    0,    0, 4174,    0,  604,
      581,  578, 4199,    0, 4224,  618,  594, 4250, 4276, 4302,
     4328, 4354, 4380, 4406,    0, 4432, 4458, 4483,    0, 4509,
     4534, 4560,    0, 4586, 4611,    0, 4637,    0,    0,    0,
     4663, 4689, 4714,  608, 4740,  645, 4759, 4779, 4800,  638,

     4821, 4842, 4863, 4884, 4905,  644, 4926, 4946,  660, 4967,
     4988, 5009, 5029,    0, 5050,    0,    0,  651, 5071,  663,
      616, 5091, 5117, 5143, 5169, 5189, 5215, 5241,  674, 5266,
     5292,    0,    0, 5311, 5337,    0, 5357, 5383,    0,  684,
     5408,    0,    0,    0, 5427,    0,  689,  699,  630,    0,
     7098, 5453, 5459, 5466, 5471, 5477, 5484, 5491, 5498, 5505,
     5512, 5519, 5526, 5533, 5540, 5547, 5554, 5561, 5568, 5575,
     5582, 5589, 5596, 5603, 5610, 5617, 5624, 5631, 5638, 5645,
     5652, 5659, 5666, 5673, 5680, 5687, 5694, 5701, 5708, 5715,
     5722, 5729, 5736, 5743, 5750, 5757, 5764, 5771, 5778, 5785,

     5792, 5799, 5806, 5813, 5820, 5827, 5834, 5841, 5848, 5855,
     5862, 5868, 5875, 5882, 5889, 5896, 5903, 5910, 5917, 5924,
     5931, 5938, 5945, 5952, 5959, 5966, 5973, 5980, 5987, 5994,
     6001, 6008, 6015, 6022, 6029, 6036, 6043, 6050, 6057, 6064,
     6071, 6078, 6085, 6092, 6099, 6106, 6113, 6120, 6127, 6134,
     6141, 6148, 6155, 6162, 6169, 6176, 6183, 6190, 6197, 6204,
     6211, 6217, 6224, 6231, 6238, 6245, 6252, 6259, 6266, 6273,
     6280, 6287, 6294, 6301, 6308, 6315, 6322, 6329, 6336, 6343,
     6350, 6357, 6364, 6371, 6378, 6385, 6392, 6399, 6406, 6413,
     6420, 6427, 6434, 6441, 6448, 6455, 6462, 6469, 6476, 6483,

     6490, 6497, 6504, 6511, 6518, 6525, 6532, 6539, 6546, 6553,
     6559, 6566, 6573, 6580, 6587, 6594, 6601, 6608, 6615, 6622,
     6629, 6636, 6643, 6650, 6657, 6664, 6671, 6678, 6685, 6692,
     6699, 6706, 6713, 6720, 6727, 6734, 6741, 6748, 6755, 6762,
     6769, 6776, 6783, 6790, 6797, 6804, 6811, 6818, 6825, 6832,
     6839, 6846, 6853, 6860, 6867, 6874, 6881, 6888, 6894, 6901,
     6908, 6915, 6922, 6929, 6936, 6943, 6950, 6957, 6964, 6971,
     6978, 6985, 6992, 6999, 7006, 7013, 7020, 7027, 7034, 7041,
     7048, 7055, 7062, 7069, 7076, 7083, 7090
    } ;

static const flex_int16_t yy_def[688] =
    {   0,
      451,    1,  451,  452,  451,  451,  453,  452,    8,  454,
        8,    8,  455,  456,  457,    8,  451,  458,    8,  459,
      454,  455,  456,  453,  460,    8,  461,  462,  463,  464,
      465,  459,  466,  455,  467,  455,  455,  468,  456,  469,
      470,  468,  456,  471,  457,  472,  473,  474,  475,  476,
        8,    8,  477,  458,  478,  479,  480,  481,  482,   32,
      466,  467,  469,  477,  483,  451,  461,   32,  484,  485,
      486,  487,  488,  454,  455,  489,  464,  456,  490,  489,
       77,  491,  465,  492,   83,  493,  494,  495,   32,   89,
       89,   89,  496,  497,  498,  455,  468,   63,  499,  497,

       63,  500,  501,  451,  473,  502,  503,  504,   89,  505,
      506,  454,  507,  455,  508,  509,  507,  508,  456,  510,
      511,  512,  513,  514,  515,  516,  517,  518,  519,  520,
      521,  519,  520,  522,  523,  496,  498,  501,  512,  524,
      525,  526,  527,  528,  529,   63,  530,  527,  529,  531,
      532,  533,  534,  535,  523,  525,  528,  532,  534,  536,
      537,  538,  539,  540,  541,  542,  543,  544,  544,  545,
      543,  169,  546,  155,  155,  155,  155,  547,  548,  548,
      549,  550,  138,  549,  180,  138,  550,  524,  551,  552,
      526,  553,  554,  555,  552,  554,   63,  556,  557,  533,

      558,  559,  551,  553,  557,  155,  558,  560,  536,  538,
      539,  561,  562,  563,  564,  565,  566,  563,  565,  567,
      568,  569,  570,  562,  564,  568,  569,  571,  572,  573,
      574,  575,  576,  577,  547,  578,  579,  580,  579,  581,
      582,  583,  584,  585,  586,  582,  239,  585,  584,  587,
      588,  589,  590,  591,  592,  593,  593,  594,  595,  596,
      597,  598,  599,  577,  600,  547,  601,  601,  580,  581,
      602,  583,  603,  604,  602,  268,  604,  586,  603,  587,
      605,  606,  607,  608,  609,  610,  611,  612,  612,  613,
      614,  615,  613,  289,  615,  614,  616,  617,  618,  619,

      620,  621,  621,  622,  623,  624,  625,  626,  622,  577,
      623,  597,  269,  624,  314,  598,  312,  314,  599,  278,
      625,  587,  627,  628,  629,  630,  631,  632,  633,  634,
      303,  634,  635,  636,  637,  638,  639,  309,  635,  640,
      311,  636,  629,  641,  637,  314,  345,  632,  343,  345,
      633,  642,  625,  638,  643,  312,  312,  627,  316,  630,
      599,  631,  644,  358,  645,  630,  631,  646,  647,  648,
      648,  649,  650,  651,  303,  652,  653,  649,  309,  654,
      650,  645,  311,  655,  651,  385,  646,  382,  385,  314,
      647,  656,  652,  625,  657,  658,  659,  660,  661,  662,

      663,  663,  664,  665,  666,  667,  668,  664,  669,  665,
      660,  670,  666,  413,  661,  411,  413,  662,  671,  667,
      672,  673,  674,  674,  675,  676,  677,  678,  679,  680,
      681,  382,  382,  673,  682,  387,  676,  683,  391,  679,
      684,  685,  411,  411,  659,  415,  686,  662,  687,  685,
        0,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451
    } ;

static const flex_int16_t yy_nxt[7127] =
    {   0,
        4,    5,    6,    5,    4,    7,    8,    9,    4,    4,
       10,   11,   12,   13,    4,   14,    4,   15,    4,    4,
        4,    4,   16,    4,    4,   17,    4,   18,   20,   19,
       33,   44,   21,  182,   19,   22,  182,   23,   19,   34,
       53,   19,   19,   44,   19,   20,   20,   25,   33,   25,
       20,   26,   27,   52,   20,   96,   28,   20,   53,   29,
       19,   30,   41,   38,   19,   42,   19,   43,   59,  291,
       27,   25,   20,   64,   31,   64,   21,   44,   64,   22,
       59,   23,   19,   94,   44,   64,   93,   64,   93,   97,
       32,   35,   36,   64,   95,  139,  122,   44,   37,   44,

       38,   41,   97,   19,   42,   19,   43,  139,   41,   35,
       40,   42,   44,   43,   41,  134,   44,   42,  233,   43,
       19,   19,   19,   44,  164,  135,   59,  134,   40,   44,
       46,  129,   46,  122,  222,   47,  233,  121,   19,   48,
       38,   59,   49,  135,   50,   56,   51,   25,   57,   25,
       58,  152,   64,   47,   46,   55,   65,   94,   44,   56,
       59,   25,   57,   25,   58,  163,  131,   64,   95,  132,
       44,  133,  153,   55,   59,   61,  182,   60,   62,   60,
       63,  134,   38,  136,  177,  176,  137,   60,  138,   60,
       64,   65,   25,   60,   25,   60,   26,   41,  139,  175,

       42,   28,   43,   60,   29,   60,   30,   25,  102,   25,
      139,  250,   44,  178,  164,  180,   25,   25,   38,   25,
      102,   68,   44,  102,  179,  139,   69,   97,   46,   70,
       46,   71,  102,  181,  102,  122,   46,   44,   46,  178,
      122,   72,   73,   25,  211,   25,  104,   74,  184,  102,
      179,  185,  200,  186,   41,   25,   84,   42,   84,   43,
       38,  201,  127,  187,  259,   38,  134,   25,   25,   44,
       25,  228,   75,   21,  127,  213,   22,   25,   23,   66,
       38,  134,   76,  127,  212,  134,  224,  451,  214,  225,
      228,  226,   25,   25,  135,   25,  187,   78,  127,  215,

      134,  227,   79,  451,  135,   80,  131,   81,  187,  132,
      131,  133,  135,  132,   44,  133,  230,   82,   84,   97,
       84,  134,  135,  139,   64,  134,   85,   86,  451,   44,
       87,  451,   88,  135,  230,  139,   64,   93,   44,  451,
      263,   64,   84,   89,  451,   90,   94,  451,  451,   61,
       44,  135,   62,   91,   63,   92,   64,   95,  263,   25,
       64,   25,  102,  242,   64,   65,   99,  178,  262,  100,
      451,  101,   64,   93,  187,  187,  301,  102,  179,  260,
      451,  102,  103,   46,  243,   46,  262,  187,   64,  187,
      451,  451,   48,   94,  301,   49,   46,   50,   46,   51,

       46,  233,   46,   64,   95,  233,   21,   46,   46,   22,
       46,   23,  272,   44,  286,  227,  280,  106,   97,  233,
      107,  273,  108,  233,  109,  220,  220,  227,   44,  321,
      287,  102,  110,  111,   46,  451,   46,  227,  220,  290,
      220,  288,  289,  102,  181,  451,   46,  321,  220,  322,
      112,  293,  227,  287,  294,  451,  295,  134,   46,   46,
      298,   46,  228,  220,  288,  102,  296,  227,   46,  230,
      178,  451,  134,  113,  451,  114,  139,  400,  298,  227,
      102,  179,  451,   46,   46,  361,   46,  230,  139,   84,
       25,   84,   25,  116,  327,  400,  117,  259,  118,  230,

      119,  296,  451,  361,  451,  362,  139,  102,  120,  124,
      451,  451,  125,  296,  126,  420,  451,  230,  139,  102,
      181,  451,  102,  451,  127,  128,   99,  178,   46,  100,
       46,  101,  451,  420,  220,  421,  451,  102,  179,  287,
      451,  102,  103,   25,  367,   25,  321,   68,  296,  220,
      288,   21,   69,  397,   22,   70,   23,   71,  399,  451,
      396,  451,  361,  296,  321,  296,  322,   72,   73,   25,
      233,   25,  230,  140,  263,  451,  399,  296,  321,  139,
      361,   72,  362,  321,  263,  451,  451,  361,  233,  451,
      230,  139,  263,   72,  141,   25,  321,   25,  322,  142,

      263,  321,  263,  322,   72,  361,  451,  362,  262,  143,
      262,  451,  451,  451,  321,  187,  451,  187,  263,   72,
      144,   25,  301,   25,  262,  146,  262,  187,  262,  187,
      147,  187,  321,  148,  322,  149,  400,  451,  451,  451,
      301,  451,  262,  187,  448,  150,  151,   25,  442,   25,
      420,  155,  451,  451,  400,   21,  156,  448,   22,  157,
       23,  158,  448,  451,  449,  451,  298,  451,  420,  420,
      421,  159,   25,  227,   25,  448,  160,  449,  451,  451,
      361,   82,  451,  451,  298,  227,  161,  420,  451,  421,
      361,  451,  451,  451,  451,  399,   82,   25,  361,   25,

      362,   78,  296,  451,  451,  448,   79,  451,  361,   80,
      362,   81,  451,  399,  296,  451,  451,  451,  451,  451,
      451,   82,   25,  448,   25,  449,  162,  451,  451,  451,
      451,  451,  451,  451,   82,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,   82,   25,  451,   25,
      451,  160,  451,  451,  451,  451,   82,  451,  451,  451,
      451,  161,  451,  451,  451,  451,  451,  451,  451,  451,
      451,   82,   84,  451,   84,  451,  451,  451,  451,  451,
       85,   86,  451,  451,   87,  451,   88,  451,  451,  451,
      451,  451,  451,  451,  451,  451,   84,   84,  451,   84,

      451,  451,  451,  451,  451,  165,  451,  451,  451,   84,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,   84,   84,  451,   84,  451,  451,  451,  451,  451,
      166,   84,  451,  451,  451,  451,  167,  451,  451,  451,
      451,  451,  451,  451,  451,  451,   84,   84,  451,   84,
      451,  451,  451,  451,  451,  169,  170,  451,  451,  171,
      451,  172,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  173,   60,  451,   60,  451,  451,  451,  451,  451,
      451,  451,   60,  451,   60,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  174,   46,  451,   46,  451,  451,

      451,  451,  451,  451,  106,  451,  451,  107,  451,  108,
      451,  109,  451,  451,  451,  451,  451,  451,  451,  110,
      111,   46,  451,   46,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  110,  451,  451,  451,  188,  451,  451,
      451,  451,  451,  451,  451,  110,  189,   46,  451,   46,
      451,  451,  451,  451,  451,  451,  110,  451,  451,  451,
      451,  190,  451,  191,  451,  451,  451,  451,  451,  451,
      451,  110,  192,   46,  451,   46,  451,  451,  451,  451,
      451,  451,  194,  451,  451,  195,  451,  196,  451,  197,
      451,  451,  451,  451,  451,  451,  451,  198,  199,   46,

      451,   46,  451,  451,  451,  451,  451,  451,  203,  451,
      451,  204,  451,  205,  451,  206,  451,  451,  451,  451,
      451,  451,  451,  207,   46,  451,   46,  451,  451,  451,
      451,  451,  451,  120,  451,  451,  451,  451,  208,  451,
      209,  451,  451,  451,  451,  451,  451,  451,  120,   46,
      451,   46,  451,  451,  451,  451,  451,  451,  116,  451,
      451,  117,  451,  118,  451,  119,  451,  451,  451,  451,
      451,  451,  451,  120,   46,  451,   46,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  120,  451,  451,  451,
      210,  451,  451,  451,  451,  451,  451,  451,  120,   46,

      451,   46,  451,  451,  451,  451,  451,  451,  120,  451,
      451,  451,  451,  208,  451,  209,  451,  451,  451,  451,
      451,  451,  451,  120,   46,  451,   46,  451,  451,  451,
      451,  451,  451,  116,  451,  451,  117,  451,  118,  451,
      119,  451,  451,  451,  451,  451,  451,  451,  120,  124,
      451,  451,  125,  451,  126,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  127,  128,  217,  451,  451,  218,
      451,  219,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  220,  221,  229,  451,  451,  451,  136,  451,  451,
      137,  451,  138,  451,  451,  451,  451,  451,  451,  451,

      451,  229,  139,  231,  451,  451,  451,  139,  451,  451,
      451,  451,  180,  451,  451,  451,  451,  451,  451,  451,
      451,  231,  139,  232,  451,  451,  451,  184,  451,  451,
      185,  451,  186,  451,  451,  451,  451,  451,  451,  451,
      451,  232,  187,   25,  451,   25,  451,  234,  451,  451,
      451,  451,  451,  451,  451,  159,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  159,   25,  451,
       25,  451,  235,  451,  451,  451,  451,  150,  451,  451,
      451,  451,  236,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  150,  237,   25,  451,   25,  451,  238,  451,

      451,  451,  451,  159,  451,  451,  451,  451,  239,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  159,   25,
      451,   25,  451,  146,  451,  451,  451,  451,  147,  451,
      451,  148,  451,  149,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  150,  151,   25,  451,   25,  451,  240,
      451,  451,  451,  451,  451,  451,  451,  150,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  150,
      241,   25,  451,   25,  451,  235,  451,  451,  451,  451,
      150,  451,  451,  451,  451,  236,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  150,  237,   25,  451,   25,

      451,  146,  451,  451,  451,  451,  147,  451,  451,  148,
      451,  149,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  150,  151,   25,  451,   25,  451,  245,  451,  451,
      451,  451,  246,  451,  451,  247,  451,  248,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  249,   25,  451,
       25,  451,  155,  251,  451,  451,  451,  156,  451,  451,
      157,  451,  158,  451,  451,  451,  451,  451,  451,  451,
      451,  251,  159,  229,  451,  451,  451,  136,  451,  451,
      137,  451,  138,  451,  451,  451,  451,  451,  451,  451,
      451,  229,  139,   25,  451,   25,  451,  234,  252,  451,

      451,  451,  451,  451,  451,  159,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  252,  159,   25,  451,
       25,  451,  238,  253,  451,  451,  451,  159,  451,  451,
      451,  451,  239,  451,  451,  451,  451,  451,  451,  451,
      451,  253,  159,   25,  451,   25,  451,  245,  254,  451,
      451,  451,  246,  451,  451,  247,  451,  248,  451,  451,
      451,  451,  451,  451,  451,  451,  254,  249,   25,  451,
       25,  451,  250,  255,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  255,   25,  451,   25,  451,  160,  451,  451,  451,

      451,   82,  451,  451,  451,  451,  161,  451,  451,  451,
      451,  451,  451,  451,  451,  451,   82,   84,  451,   84,
      451,  451,  451,  451,  451,  165,  451,  451,  451,   84,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,   84,   84,  451,   84,  451,  451,  451,  451,  451,
      166,   84,  451,  451,  451,  451,  167,  451,  451,  451,
      451,  451,  451,  451,  451,  451,   84,   84,  451,   84,
      451,  451,  451,  451,  451,  256,  173,  451,  451,  451,
      451,  257,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  173,   84,  451,   84,  451,  451,  451,  451,  451,

      169,  170,  451,  451,  171,  451,  172,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  173,   84,  451,   84,
      451,  451,  451,  451,  451,  169,  170,  451,  451,  171,
      451,  172,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  173,   84,  451,   84,  451,  451,  451,  451,  451,
      258,  451,  451,  451,  173,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  173,   84,  451,   84,
      451,  451,  451,  451,  451,  256,  173,  451,  451,  451,
      451,  257,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  173,  261,  451,  451,  451,  187,  451,  451,  451,

      451,  260,  451,  451,  451,  451,  451,  451,  451,  451,
      261,  187,   46,  451,   46,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  207,  451,  451,  451,  264,  451,
      451,  451,  451,  451,  451,  451,  207,   46,  451,   46,
      451,  451,  451,  451,  451,  451,  198,  451,  451,  451,
      451,  265,  451,  266,  451,  451,  451,  451,  451,  451,
      451,  198,  267,   46,  451,   46,  451,  451,  451,  451,
      451,  451,  207,  451,  451,  451,  451,  268,  451,  269,
      451,  451,  451,  451,  451,  451,  451,  207,   46,  451,
       46,  451,  451,  451,  451,  451,  451,  194,  451,  451,

      195,  451,  196,  451,  197,  451,  451,  451,  451,  451,
      451,  451,  198,  199,   46,  451,   46,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  198,  451,  451,  451,
      270,  451,  451,  451,  451,  451,  451,  451,  198,  271,
       46,  451,   46,  451,  451,  451,  451,  451,  451,  198,
      451,  451,  451,  451,  265,  451,  266,  451,  451,  451,
      451,  451,  451,  451,  198,  267,   46,  451,   46,  451,
      451,  451,  451,  451,  451,  194,  451,  451,  195,  451,
      196,  451,  197,  451,  451,  451,  451,  451,  451,  451,
      198,  199,   46,  451,   46,  451,  451,  451,  451,  451,

      451,  275,  451,  451,  276,  451,  277,  451,  278,  451,
      451,  451,  451,  451,  451,  451,  279,   46,  451,   46,
      451,  451,  281,  451,  451,  451,  203,  451,  451,  204,
      451,  205,  451,  206,  451,  451,  451,  451,  451,  451,
      281,  207,   46,  451,   46,  451,  451,  282,  451,  451,
      451,  451,  451,  451,  207,  451,  451,  451,  264,  451,
      451,  451,  451,  451,  451,  282,  207,   46,  451,   46,
      451,  451,  283,  451,  451,  451,  207,  451,  451,  451,
      451,  268,  451,  269,  451,  451,  451,  451,  451,  451,
      283,  207,   46,  451,   46,  451,  451,  284,  451,  451,

      451,  275,  451,  451,  276,  451,  277,  451,  278,  451,
      451,  451,  451,  451,  451,  284,  279,   46,  451,   46,
      451,  451,  285,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  280,  451,  451,  451,  451,  451,  451,
      285,   46,  451,   46,  451,  451,  451,  451,  451,  451,
      120,  451,  451,  451,  451,  208,  451,  209,  451,  451,
      451,  451,  451,  451,  451,  120,  217,  451,  451,  218,
      451,  219,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  220,  221,  217,  451,  451,  218,  451,  219,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  220,  221,

      297,  451,  451,  451,  224,  451,  451,  225,  451,  226,
      451,  451,  451,  451,  451,  451,  451,  451,  297,  227,
      299,  451,  451,  451,  227,  451,  451,  451,  451,  289,
      451,  451,  451,  451,  451,  451,  451,  451,  299,  227,
      300,  451,  451,  451,  293,  451,  451,  294,  451,  295,
      451,  451,  451,  451,  451,  451,  451,  451,  300,  296,
      303,  451,  451,  451,  304,  451,  451,  305,  451,  306,
      451,  451,  451,  451,  451,  451,  451,  451,  303,  307,
      308,  309,  451,  451,  451,  451,  451,  451,  307,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  309,

      307,  310,  311,  451,  451,  451,  307,  451,  451,  451,
      451,  312,  451,  451,  451,  451,  451,  451,  451,  451,
      311,  307,  313,  315,  451,  451,  451,  316,  451,  451,
      317,  451,  318,  451,  451,  451,  451,  451,  451,  451,
      451,  315,  319,  320,   25,  451,   25,  451,  235,  451,
      451,  451,  451,  150,  451,  451,  451,  451,  236,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  150,  237,
       25,  451,   25,  451,  323,  451,  451,  451,  451,  249,
      451,  451,  451,  451,  324,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  249,  231,  451,  451,  451,  139,

      451,  451,  451,  451,  180,  451,  451,  451,  451,  451,
      451,  451,  451,  231,  139,   25,  451,   25,  451,  323,
      325,  451,  451,  451,  249,  451,  451,  451,  451,  324,
      451,  451,  451,  451,  451,  451,  451,  451,  325,  249,
       25,  451,   25,  451,  326,  451,  451,  451,  451,  451,
      451,  451,  249,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  249,   25,  451,   25,  451,  245,
      254,  451,  451,  451,  246,  451,  451,  247,  451,  248,
      451,  451,  451,  451,  451,  451,  451,  451,  254,  249,
      232,  451,  451,  451,  184,  451,  451,  185,  451,  186,

      451,  451,  451,  451,  451,  451,  451,  451,  232,  187,
       25,  451,   25,  451,  326,  328,  451,  451,  451,  451,
      451,  451,  249,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  328,  249,   25,  451,   25,  451,  245,
      254,  451,  451,  451,  246,  451,  451,  247,  451,  248,
      451,  451,  451,  451,  451,  451,  451,  451,  254,  249,
       25,  451,   25,  451,  327,  329,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  329,   25,  451,   25,  451,  331,  332,
      451,  451,  451,  333,  451,  451,  334,  451,  335,  451,

      451,  451,  451,  451,  451,  451,  451,  332,  336,  337,
       25,  451,   25,  451,  338,  339,  451,  451,  451,  451,
      451,  451,  336,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  339,  336,  340,   25,  451,   25,  451,
      341,  342,  451,  451,  451,  336,  451,  451,  451,  451,
      343,  451,  451,  451,  451,  451,  451,  451,  451,  342,
      336,  344,   25,  451,   25,  451,  346,  347,  451,  451,
      451,  348,  451,  451,  349,  451,  350,  451,  451,  451,
      451,  451,  451,  451,  451,  347,  351,  352,   25,  451,
       25,  451,  353,  354,  451,  451,  451,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  354,  451,  355,   84,  451,   84,  451,  451,  451,
      451,  451,  256,  173,  451,  451,  451,  451,  257,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  173,   84,
      451,   84,  451,  451,  451,  451,  451,  256,  173,  451,
      451,  451,  451,  257,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  173,   84,  451,   84,  451,  451,  451,
      451,  451,  258,  451,  451,  451,  173,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  173,  261,
      451,  451,  451,  187,  451,  451,  451,  451,  260,  451,

      451,  451,  451,  451,  451,  451,  451,  261,  187,  356,
      451,  451,  451,  319,  451,  451,  451,  451,  357,  451,
      451,  451,  451,  451,  451,  451,  451,  356,  319,  358,
      359,  451,  451,  451,  451,  451,  451,  319,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  359,  319,
      360,   46,  451,   46,  451,  451,  451,  451,  451,  451,
      198,  451,  451,  451,  451,  265,  451,  266,  451,  451,
      451,  451,  451,  451,  451,  198,  267,   46,  451,   46,
      451,  451,  451,  451,  451,  451,  279,  451,  451,  451,
      451,  363,  451,  364,  451,  451,  451,  451,  451,  451,

      451,  279,   46,  451,   46,  451,  451,  365,  451,  451,
      451,  279,  451,  451,  451,  451,  363,  451,  364,  451,
      451,  451,  451,  451,  451,  365,  279,  231,  451,  451,
      451,  139,  451,  451,  451,  451,  180,  451,  451,  451,
      451,  451,  451,  451,  451,  231,  139,   46,  451,   46,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  279,
      451,  451,  451,  366,  451,  451,  451,  451,  451,  451,
      451,  279,   46,  451,   46,  451,  451,  284,  451,  451,
      451,  275,  451,  451,  276,  451,  277,  451,  278,  451,
      451,  451,  451,  451,  451,  284,  279,   46,  451,   46,

      451,  451,  368,  451,  451,  451,  451,  451,  451,  279,
      451,  451,  451,  366,  451,  451,  451,  451,  451,  451,
      368,  279,   46,  451,   46,  451,  451,  284,  451,  451,
      451,  275,  451,  451,  276,  451,  277,  451,  278,  451,
      451,  451,  451,  451,  451,  284,  279,  232,  451,  451,
      451,  184,  451,  451,  185,  451,  186,  451,  451,  451,
      451,  451,  451,  451,  451,  232,  187,   46,  451,   46,
      451,  451,  369,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  367,  451,  451,  451,  451,  451,  451,
      369,   46,  451,   46,  451,  451,  371,  451,  451,  451,

      372,  451,  451,  373,  451,  374,  451,  375,  451,  451,
      451,  451,  451,  451,  371,  376,  377,   46,  451,   46,
      451,  451,  378,  451,  451,  451,  451,  451,  451,  376,
      451,  451,  451,  379,  451,  451,  451,  451,  451,  451,
      378,  376,  380,   46,  451,   46,  451,  451,  381,  451,
      451,  451,  376,  451,  451,  451,  451,  382,  451,  383,
      451,  451,  451,  451,  451,  451,  381,  376,  384,   46,
      451,   46,  451,  451,  386,  451,  451,  451,  387,  451,
      451,  388,  451,  389,  451,  390,  451,  451,  451,  451,
      451,  451,  386,  391,  392,   46,  451,   46,  451,  451,

      393,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  394,  451,  451,  451,  451,  451,  451,  393,  451,
      395,  398,  451,  451,  451,  296,  451,  451,  451,  451,
      397,  451,  451,  451,  451,  451,  451,  451,  451,  398,
      296,  300,  451,  451,  451,  293,  451,  451,  294,  451,
      295,  451,  451,  451,  451,  451,  451,  451,  451,  300,
      296,  300,  451,  451,  451,  293,  451,  451,  294,  451,
      295,  451,  451,  451,  451,  451,  451,  451,  451,  300,
      296,  402,  451,  451,  451,  403,  451,  451,  404,  451,
      405,  451,  451,  451,  451,  451,  451,  451,  451,  402,

      406,  407,  408,  451,  451,  451,  451,  451,  451,  406,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      408,  406,  409,  410,  451,  451,  451,  406,  451,  451,
      451,  451,  411,  451,  451,  451,  451,  451,  451,  451,
      451,  410,  406,  412,  414,  451,  451,  451,  415,  451,
      451,  416,  451,  417,  451,  451,  451,  451,  451,  451,
      451,  451,  414,  418,  419,  303,  451,  451,  451,  304,
      451,  451,  305,  451,  306,  451,  451,  451,  451,  451,
      451,  451,  451,  303,  307,  308,  303,  451,  451,  451,
      304,  451,  451,  305,  451,  306,  451,  451,  451,  451,

      451,  451,  451,  451,  303,  307,  308,  309,  451,  451,
      451,  451,  451,  451,  307,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  309,  307,  310,  311,  451,
      451,  451,  307,  451,  451,  451,  451,  312,  451,  451,
      451,  451,  451,  451,  451,  451,  311,  307,  313,  315,
      451,  451,  451,  316,  451,  451,  317,  451,  318,  451,
      451,  451,  451,  451,  451,  451,  451,  315,  319,  320,
      229,  451,  451,  451,  136,  451,  451,  137,  451,  138,
      451,  451,  451,  451,  451,  451,  451,  451,  229,  139,
      309,  451,  451,  451,  451,  451,  451,  307,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  309,  307,
      310,  311,  451,  451,  451,  307,  451,  451,  451,  451,
      312,  451,  451,  451,  451,  451,  451,  451,  451,  311,
      307,  313,  356,  451,  451,  451,  319,  451,  451,  451,
      451,  357,  451,  451,  451,  451,  451,  451,  451,  451,
      356,  319,  358,  315,  451,  451,  451,  316,  451,  451,
      317,  451,  318,  451,  451,  451,  451,  451,  451,  451,
      451,  315,  319,  320,  359,  451,  451,  451,  451,  451,
      451,  319,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  359,  319,  360,  261,  451,  451,  451,  187,

      451,  451,  451,  451,  260,  451,  451,  451,  451,  451,
      451,  451,  451,  261,  187,   25,  451,   25,  451,  323,
      325,  451,  451,  451,  249,  451,  451,  451,  451,  324,
      451,  451,  451,  451,  451,  451,  451,  451,  325,  249,
       25,  451,   25,  451,  422,  423,  451,  451,  451,  351,
      451,  451,  451,  451,  424,  451,  451,  451,  451,  451,
      451,  451,  451,  423,  351,  425,   25,  451,   25,  451,
      426,  427,  451,  451,  451,  451,  451,  451,  351,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  427,
      351,  428,   25,  451,   25,  451,  429,  430,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  430,  451,  431,   25,  451,
       25,  451,  331,  332,  451,  451,  451,  333,  451,  451,
      334,  451,  335,  451,  451,  451,  451,  451,  451,  451,
      451,  332,  336,  337,   25,  451,   25,  451,  331,  332,
      451,  451,  451,  333,  451,  451,  334,  451,  335,  451,
      451,  451,  451,  451,  451,  451,  451,  332,  336,  337,
       25,  451,   25,  451,  338,  339,  451,  451,  451,  451,
      451,  451,  336,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  339,  336,  340,   25,  451,   25,  451,

      341,  342,  451,  451,  451,  336,  451,  451,  451,  451,
      343,  451,  451,  451,  451,  451,  451,  451,  451,  342,
      336,  344,   25,  451,   25,  451,  346,  347,  451,  451,
      451,  348,  451,  451,  349,  451,  350,  451,  451,  451,
      451,  451,  451,  451,  451,  347,  351,  352,   25,  451,
       25,  451,  353,  354,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  354,  451,  355,   25,  451,   25,  451,  155,  251,
      451,  451,  451,  156,  451,  451,  157,  451,  158,  451,
      451,  451,  451,  451,  451,  451,  451,  251,  159,   25,

      451,   25,  451,  338,  339,  451,  451,  451,  451,  451,
      451,  336,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  339,  336,  340,   25,  451,   25,  451,  234,
      252,  451,  451,  451,  451,  451,  451,  159,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  252,  159,
       25,  451,   25,  451,  341,  342,  451,  451,  451,  336,
      451,  451,  451,  451,  343,  451,  451,  451,  451,  451,
      451,  451,  451,  342,  336,  344,   25,  451,   25,  451,
      422,  423,  451,  451,  451,  351,  451,  451,  451,  451,
      424,  451,  451,  451,  451,  451,  451,  451,  451,  423,

      351,  425,   25,  451,   25,  451,  238,  253,  451,  451,
      451,  159,  451,  451,  451,  451,  239,  451,  451,  451,
      451,  451,  451,  451,  451,  253,  159,   25,  451,   25,
      451,  346,  347,  451,  451,  451,  348,  451,  451,  349,
      451,  350,  451,  451,  451,  451,  451,  451,  451,  451,
      347,  351,  352,   25,  451,   25,  451,  426,  427,  451,
      451,  451,  451,  451,  451,  351,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  427,  351,  428,   25,
      451,   25,  451,  429,  430,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,

      451,  451,  430,  451,  431,   25,  451,   25,  451,  245,
      254,  451,  451,  451,  246,  451,  451,  247,  451,  248,
      451,  451,  451,  451,  451,  451,  451,  451,  254,  249,
       25,  451,   25,  451,  353,  354,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  354,  451,  355,   25,  451,   25,  451,
      250,  255,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  255,
      261,  451,  451,  451,  187,  451,  451,  451,  451,  260,
      451,  451,  451,  451,  451,  451,  451,  451,  261,  187,

       46,  451,   46,  451,  451,  365,  451,  451,  451,  279,
      451,  451,  451,  451,  363,  451,  364,  451,  451,  451,
      451,  451,  451,  365,  279,   46,  451,   46,  451,  451,
      432,  451,  451,  451,  391,  451,  451,  451,  451,  433,
      451,  434,  451,  451,  451,  451,  451,  451,  432,  391,
      435,   46,  451,   46,  451,  451,  436,  451,  451,  451,
      451,  451,  451,  391,  451,  451,  451,  437,  451,  451,
      451,  451,  451,  451,  436,  391,  438,   46,  451,   46,
      451,  451,  439,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  440,  451,  451,  451,  451,  451,  451,

      439,  451,  441,   46,  451,   46,  451,  451,  371,  451,
      451,  451,  372,  451,  451,  373,  451,  374,  451,  375,
      451,  451,  451,  451,  451,  451,  371,  376,  377,   46,
      451,   46,  451,  451,  371,  451,  451,  451,  372,  451,
      451,  373,  451,  374,  451,  375,  451,  451,  451,  451,
      451,  451,  371,  376,  377,   46,  451,   46,  451,  451,
      378,  451,  451,  451,  451,  451,  451,  376,  451,  451,
      451,  379,  451,  451,  451,  451,  451,  451,  378,  376,
      380,   46,  451,   46,  451,  451,  381,  451,  451,  451,
      376,  451,  451,  451,  451,  382,  451,  383,  451,  451,

      451,  451,  451,  451,  381,  376,  384,   46,  451,   46,
      451,  451,  386,  451,  451,  451,  387,  451,  451,  388,
      451,  389,  451,  390,  451,  451,  451,  451,  451,  451,
      386,  391,  392,   46,  451,   46,  451,  451,  393,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  394,
      451,  451,  451,  451,  451,  451,  393,  451,  395,   46,
      451,   46,  451,  451,  281,  451,  451,  451,  203,  451,
      451,  204,  451,  205,  451,  206,  451,  451,  451,  451,
      451,  451,  281,  207,   46,  451,   46,  451,  451,  378,
      451,  451,  451,  451,  451,  451,  376,  451,  451,  451,

      379,  451,  451,  451,  451,  451,  451,  378,  376,  380,
       46,  451,   46,  451,  451,  282,  451,  451,  451,  451,
      451,  451,  207,  451,  451,  451,  264,  451,  451,  451,
      451,  451,  451,  282,  207,   46,  451,   46,  451,  451,
      381,  451,  451,  451,  376,  451,  451,  451,  451,  382,
      451,  383,  451,  451,  451,  451,  451,  451,  381,  376,
      384,   46,  451,   46,  451,  451,  432,  451,  451,  451,
      391,  451,  451,  451,  451,  433,  451,  434,  451,  451,
      451,  451,  451,  451,  432,  391,  435,   46,  451,   46,
      451,  451,  283,  451,  451,  451,  207,  451,  451,  451,

      451,  268,  451,  269,  451,  451,  451,  451,  451,  451,
      283,  207,   46,  451,   46,  451,  451,  386,  451,  451,
      451,  387,  451,  451,  388,  451,  389,  451,  390,  451,
      451,  451,  451,  451,  451,  386,  391,  392,   46,  451,
       46,  451,  451,  436,  451,  451,  451,  451,  451,  451,
      391,  451,  451,  451,  437,  451,  451,  451,  451,  451,
      451,  436,  391,  438,   46,  451,   46,  451,  451,  439,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      440,  451,  451,  451,  451,  451,  451,  439,  451,  441,
       46,  451,   46,  451,  451,  284,  451,  451,  451,  275,

      451,  451,  276,  451,  277,  451,  278,  451,  451,  451,
      451,  451,  451,  284,  279,   46,  451,   46,  451,  451,
      393,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  394,  451,  451,  451,  451,  451,  451,  393,  451,
      395,   46,  451,   46,  451,  451,  285,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  280,  451,  451,
      451,  451,  451,  451,  285,  398,  451,  451,  451,  296,
      451,  451,  451,  451,  397,  451,  451,  451,  451,  451,
      451,  451,  451,  398,  296,  443,  451,  451,  451,  418,
      451,  451,  451,  451,  444,  451,  451,  451,  451,  451,

      451,  451,  451,  443,  418,  445,  446,  451,  451,  451,
      451,  451,  451,  418,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  446,  418,  447,  402,  451,  451,
      451,  403,  451,  451,  404,  451,  405,  451,  451,  451,
      451,  451,  451,  451,  451,  402,  406,  407,  402,  451,
      451,  451,  403,  451,  451,  404,  451,  405,  451,  451,
      451,  451,  451,  451,  451,  451,  402,  406,  407,  408,
      451,  451,  451,  451,  451,  451,  406,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  408,  406,  409,
      410,  451,  451,  451,  406,  451,  451,  451,  451,  411,

      451,  451,  451,  451,  451,  451,  451,  451,  410,  406,
      412,  414,  451,  451,  451,  415,  451,  451,  416,  451,
      417,  451,  451,  451,  451,  451,  451,  451,  451,  414,
      418,  419,  297,  451,  451,  451,  224,  451,  451,  225,
      451,  226,  451,  451,  451,  451,  451,  451,  451,  451,
      297,  227,  408,  451,  451,  451,  451,  451,  451,  406,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      408,  406,  409,  410,  451,  451,  451,  406,  451,  451,
      451,  451,  411,  451,  451,  451,  451,  451,  451,  451,
      451,  410,  406,  412,  443,  451,  451,  451,  418,  451,

      451,  451,  451,  444,  451,  451,  451,  451,  451,  451,
      451,  451,  443,  418,  445,  299,  451,  451,  451,  227,
      451,  451,  451,  451,  289,  451,  451,  451,  451,  451,
      451,  451,  451,  299,  227,  414,  451,  451,  451,  415,
      451,  451,  416,  451,  417,  451,  451,  451,  451,  451,
      451,  451,  451,  414,  418,  419,  446,  451,  451,  451,
      451,  451,  451,  418,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  446,  418,  447,  300,  451,  451,
      451,  293,  451,  451,  294,  451,  295,  451,  451,  451,
      451,  451,  451,  451,  451,  300,  296,  356,  451,  451,

      451,  319,  451,  451,  451,  451,  357,  451,  451,  451,
      451,  451,  451,  451,  451,  356,  319,  358,   25,  451,
       25,  451,  422,  423,  451,  451,  451,  351,  451,  451,
      451,  451,  424,  451,  451,  451,  451,  451,  451,  451,
      451,  423,  351,  425,   25,  451,   25,  451,  422,  423,
      451,  451,  451,  351,  451,  451,  451,  451,  424,  451,
      451,  451,  451,  451,  451,  451,  451,  423,  351,  425,
       25,  451,   25,  451,  323,  325,  451,  451,  451,  249,
      451,  451,  451,  451,  324,  451,  451,  451,  451,  451,
      451,  451,  451,  325,  249,  359,  451,  451,  451,  451,

      451,  451,  319,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  359,  319,  360,   25,  451,   25,  451,
      426,  427,  451,  451,  451,  451,  451,  451,  351,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  427,
      351,  428,   25,  451,   25,  451,  326,  328,  451,  451,
      451,  451,  451,  451,  249,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  328,  249,   25,  451,   25,
      451,  429,  430,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      430,  451,  431,   25,  451,   25,  451,  327,  329,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  329,  356,  451,  451,
      451,  319,  451,  451,  451,  451,  357,  451,  451,  451,
      451,  451,  451,  451,  451,  356,  319,  358,   46,  451,
       46,  451,  451,  365,  451,  451,  451,  279,  451,  451,
      451,  451,  363,  451,  364,  451,  451,  451,  451,  451,
      451,  365,  279,  359,  451,  451,  451,  451,  451,  451,
      319,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  359,  319,  360,   46,  451,   46,  451,  451,  368,
      451,  451,  451,  451,  451,  451,  279,  451,  451,  451,

      366,  451,  451,  451,  451,  451,  451,  368,  279,   46,
      451,   46,  451,  451,  369,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  367,  451,  451,  451,  451,
      451,  451,  369,  398,  451,  451,  451,  296,  451,  451,
      451,  451,  397,  451,  451,  451,  451,  451,  451,  451,
      451,  398,  296,   19,  451,  451,  451,   19,   19,   24,
       24,  451,   24,   24,   24,   24,   21,  451,  451,  451,
       21,   22,  451,  451,  451,  451,   22,   39,  451,  451,
      451,   39,   39,   39,   45,   45,  451,   45,   45,   45,
       45,   54,  451,  451,  451,   54,   54,   54,   60,  451,

      451,  451,   60,   60,   60,   25,   25,  451,   25,   25,
       25,   25,   67,   67,  451,   67,   67,   67,   67,   28,
       28,  451,   28,   28,   28,   28,   29,   29,  451,   29,
       29,   29,   29,   77,   77,  451,   77,   77,   77,   77,
       83,   83,  451,   83,   83,   83,   83,   61,  451,  451,
      451,   61,   61,   61,   62,  451,  451,  451,   62,   62,
       62,   42,  451,  451,  451,   42,   42,   42,   98,  451,
      451,  451,   98,   98,   98,   41,  451,  451,  451,   41,
       41,   41,   44,  451,  451,  451,   44,   44,   44,   46,
       46,  451,   46,   46,   46,   46,  105,  105,  451,  105,

      105,  105,  105,   48,   48,  451,   48,   48,   48,   48,
       49,   49,  451,   49,   49,   49,   49,  115,  115,  451,
      115,  115,  115,  115,   64,  451,  451,  451,   64,   64,
       64,  123,  451,  451,  451,  123,  123,  123,   56,  451,
      451,  451,   56,   56,   56,   57,  451,  451,  451,   57,
       57,   57,  130,  451,  451,  451,  130,  130,  130,   59,
      451,  451,  451,   59,   59,   59,  135,  451,  451,  451,
      135,  135,  135,   69,   69,  451,   69,   69,   69,   69,
       70,   70,  451,   70,   70,   70,   70,  145,  145,  451,
      145,  145,  145,  145,   72,   72,  451,   72,   72,   72,

       72,  154,  154,  451,  154,  154,  154,  154,   80,   80,
      451,   80,   80,   80,   80,   79,   79,  451,   79,   79,
       79,   79,   82,   82,  451,   82,   82,   82,   82,   84,
       84,  451,   84,   84,   84,   84,   86,   86,  451,   86,
       86,   86,   86,   87,   87,  451,   87,   87,   87,   87,
      168,  168,  451,  168,  168,  168,  168,  136,  451,  451,
      451,  136,  136,  136,  100,  451,  451,  451,  100,  100,
      100,  137,  451,  451,  451,  137,  137,  137,   99,  451,
      451,  451,   99,   99,   99,  102,  451,  451,  451,  102,
      102,  102,  183,  451,  451,  451,  183,  183,  183,  106,

      106,  451,  106,  106,  106,  106,  107,  107,  451,  107,
      107,  107,  107,  193,  193,  451,  193,  193,  193,  193,
      110,  110,  451,  110,  110,  110,  110,  202,  202,  451,
      202,  202,  202,  202,  117,  117,  451,  117,  117,  117,
      117,  115,  115,  451,  115,  115,  115,  115,  116,  116,
      451,  116,  116,  116,  116,  120,  120,  451,  120,  120,
      120,  120,   19,  451,  451,  451,   19,   19,  139,  451,
      451,  451,  139,  139,  139,  123,  451,  451,  451,  123,
      123,  123,  124,  451,  451,  451,  124,  124,  124,  125,
      451,  451,  451,  125,  125,  125,  216,  451,  451,  451,

      216,  216,  216,  127,  451,  451,  451,  127,  127,  127,
      223,  451,  451,  451,  223,  223,  223,  132,  451,  451,
      451,  132,  132,  132,  130,  451,  451,  451,  130,  130,
      130,  131,  451,  451,  451,  131,  131,  131,  134,  451,
      451,  451,  134,  134,  134,  135,  451,  451,  451,  135,
      135,  135,   61,  451,  451,  451,   61,   61,   61,  156,
      156,  451,  156,  156,  156,  156,   62,  451,  451,  451,
       62,   62,   62,  148,  148,  451,  148,  148,  148,  148,
      157,  157,  451,  157,  157,  157,  157,  145,  145,  451,
      145,  145,  145,  145,  147,  147,  451,  147,  147,  147,

      147,  150,  150,  451,  150,  150,  150,  150,  244,  244,
      451,  244,  244,  244,  244,   64,  451,  451,  451,   64,
       64,   64,  159,  159,  451,  159,  159,  159,  159,  154,
      154,  451,  154,  154,  154,  154,   42,  451,  451,  451,
       42,   42,   42,   80,   80,  451,   80,   80,   80,   80,
       41,  451,  451,  451,   41,   41,   41,   44,  451,  451,
      451,   44,   44,   44,   84,   84,  451,   84,   84,   84,
       84,   86,   86,  451,   86,   86,   86,   86,   87,   87,
      451,   87,   87,   87,   87,  171,  171,  451,  171,  171,
      171,  171,  168,  168,  451,  168,  168,  168,  168,  170,

      170,  451,  170,  170,  170,  170,  173,  173,  451,  173,
      173,  173,  173,  100,  451,  451,  451,  100,  100,  100,
      185,  451,  451,  451,  185,  185,  185,  184,  451,  451,
      451,  184,  184,  184,  187,  451,  451,  451,  187,  187,
      187,  203,  203,  451,  203,  203,  203,  203,  195,  195,
      451,  195,  195,  195,  195,  204,  204,  451,  204,  204,
      204,  204,  193,  193,  451,  193,  193,  193,  193,  194,
      194,  451,  194,  194,  194,  194,  198,  198,  451,  198,
      198,  198,  198,  274,  274,  451,  274,  274,  274,  274,
      207,  207,  451,  207,  207,  207,  207,  202,  202,  451,

      202,  202,  202,  202,  117,  117,  451,  117,  117,  117,
      117,   19,  451,  451,  451,   19,   19,  224,  451,  451,
      451,  224,  224,  224,  218,  451,  451,  451,  218,  218,
      218,  225,  451,  451,  451,  225,  225,  225,  216,  451,
      451,  451,  216,  216,  216,  217,  451,  451,  451,  217,
      217,  217,  220,  451,  451,  451,  220,  220,  220,  292,
      451,  451,  451,  292,  292,  292,  227,  451,  451,  451,
      227,  227,  227,  223,  451,  451,  451,  223,  223,  223,
      132,  451,  451,  451,  132,  132,  132,  302,  451,  451,
      451,  302,  302,  302,  304,  451,  451,  451,  304,  304,

      304,  305,  451,  451,  451,  305,  305,  305,  314,  451,
      451,  451,  314,  314,  314,  307,  451,  451,  451,  307,
      307,  307,  136,  451,  451,  451,  136,  136,  136,  148,
      148,  451,  148,  148,  148,  148,  247,  247,  451,  247,
      247,  247,  247,  137,  451,  451,  451,  137,  137,  137,
       99,  451,  451,  451,   99,   99,   99,  246,  246,  451,
      246,  246,  246,  246,  102,  451,  451,  451,  102,  102,
      102,  249,  249,  451,  249,  249,  249,  249,  244,  244,
      451,  244,  244,  244,  244,  183,  451,  451,  451,  183,
      183,  183,  139,  451,  451,  451,  139,  139,  139,  330,

      330,  451,  330,  330,  330,  330,  333,  333,  451,  333,
      333,  333,  333,  334,  334,  451,  334,  334,  334,  334,
      345,  345,  451,  345,  345,  345,  345,  336,  336,  451,
      336,  336,  336,  336,  171,  171,  451,  171,  171,  171,
      171,  170,  170,  451,  170,  170,  170,  170,  173,  173,
      451,  173,  173,  173,  173,  185,  451,  451,  451,  185,
      185,  185,  317,  451,  451,  451,  317,  317,  317,  316,
      451,  451,  451,  316,  316,  316,  319,  451,  451,  451,
      319,  319,  319,  195,  195,  451,  195,  195,  195,  195,
      276,  276,  451,  276,  276,  276,  276,  275,  275,  451,

      275,  275,  275,  275,  279,  279,  451,  279,  279,  279,
      279,  274,  274,  451,  274,  274,  274,  274,  370,  370,
      451,  370,  370,  370,  370,  372,  372,  451,  372,  372,
      372,  372,  373,  373,  451,  373,  373,  373,  373,  385,
      385,  451,  385,  385,  385,  385,  376,  376,  451,  376,
      376,  376,  376,   19,  451,  451,  451,   19,   19,  218,
      451,  451,  451,  218,  218,  218,  294,  451,  451,  451,
      294,  294,  294,  293,  451,  451,  451,  293,  293,  293,
      296,  451,  451,  451,  296,  296,  296,  292,  451,  451,
      451,  292,  292,  292,  401,  451,  451,  451,  401,  401,

      401,  403,  451,  451,  451,  403,  403,  403,  404,  451,
      451,  451,  404,  404,  404,  413,  451,  451,  451,  413,
      413,  413,  406,  451,  451,  451,  406,  406,  406,  302,
      451,  451,  451,  302,  302,  302,  304,  451,  451,  451,
      304,  304,  304,  305,  451,  451,  451,  305,  305,  305,
      314,  451,  451,  451,  314,  314,  314,  307,  451,  451,
      451,  307,  307,  307,  135,  451,  451,  451,  135,  135,
      135,  185,  451,  451,  451,  185,  185,  185,  247,  247,
      451,  247,  247,  247,  247,  349,  349,  451,  349,  349,
      349,  349,  184,  451,  451,  451,  184,  184,  184,  187,

      451,  451,  451,  187,  187,  187,  348,  348,  451,  348,
      348,  348,  348,  351,  351,  451,  351,  351,  351,  351,
      330,  330,  451,  330,  330,  330,  330,  333,  333,  451,
      333,  333,  333,  333,  334,  334,  451,  334,  334,  334,
      334,  345,  345,  451,  345,  345,  345,  345,  336,  336,
      451,  336,  336,  336,  336,  154,  154,  451,  154,  154,
      154,  154,  156,  156,  451,  156,  156,  156,  156,  157,
      157,  451,  157,  157,  157,  157,  244,  244,  451,  244,
      244,  244,  244,  159,  159,  451,  159,  159,  159,  159,
      276,  276,  451,  276,  276,  276,  276,  388,  388,  451,

      388,  388,  388,  388,  387,  387,  451,  387,  387,  387,
      387,  391,  391,  451,  391,  391,  391,  391,  370,  370,
      451,  370,  370,  370,  370,  372,  372,  451,  372,  372,
      372,  372,  373,  373,  451,  373,  373,  373,  373,  385,
      385,  451,  385,  385,  385,  385,  376,  376,  451,  376,
      376,  376,  376,  202,  202,  451,  202,  202,  202,  202,
      203,  203,  451,  203,  203,  203,  203,  204,  204,  451,
      204,  204,  204,  204,  274,  274,  451,  274,  274,  274,
      274,  207,  207,  451,  207,  207,  207,  207,   19,  451,
      451,   19,   19,   19,  294,  451,  451,  451,  294,  294,

      294,  416,  451,  451,  451,  416,  416,  416,  415,  451,
      451,  451,  415,  415,  415,  418,  451,  451,  451,  418,
      418,  418,  401,  451,  451,  451,  401,  401,  401,  403,
      451,  451,  451,  403,  403,  403,  404,  451,  451,  451,
      404,  404,  404,  413,  451,  451,  451,  413,  413,  413,
      406,  451,  451,  451,  406,  406,  406,  223,  451,  451,
      451,  223,  223,  223,  224,  451,  451,  451,  224,  224,
      224,  225,  451,  451,  451,  225,  225,  225,  292,  451,
      451,  451,  292,  292,  292,  227,  451,  451,  451,  227,
      227,  227,  317,  451,  451,  451,  317,  317,  317,  349,

      349,  451,  349,  349,  349,  349,  247,  247,  451,  247,
      247,  247,  247,  316,  451,  451,  451,  316,  316,  316,
      348,  348,  451,  348,  348,  348,  348,  246,  246,  451,
      246,  246,  246,  246,  319,  451,  451,  451,  319,  319,
      319,  351,  351,  451,  351,  351,  351,  351,  249,  249,
      451,  249,  249,  249,  249,  276,  276,  451,  276,  276,
      276,  276,  275,  275,  451,  275,  275,  275,  275,  279,
      279,  451,  279,  279,  279,  279,  450,  451,  451,  451,
      450,  450,  450,  293,  451,  451,  451,  293,  293,  293,
      296,  451,  451,  451,  296,  296,  296,    3,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451
    } ;

static const flex_int16_t yy_chk[7127] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    4,    9,
       10,   41,    4,  272,   11,    4,  242,    4,   12,   11,
       17,   16,   19,   41,   19,    9,    4,    7,   10,    7,
       11,    7,    7,   16,   12,   37,    7,   16,   17,    7,
       19,    7,   23,   37,   26,   23,   26,   23,   56,  220,
        7,    7,    8,   33,    8,   61,    8,   23,   35,    8,
       56,    8,   26,   35,   38,   33,   33,   61,   61,   38,
        8,   13,   13,   35,   35,   93,  200,   42,   13,   38,

       13,   39,   42,   51,   39,   51,   39,   93,   43,   13,
       14,   43,   42,   43,   14,  131,   39,   14,  139,   14,
       52,   51,   52,   43,  164,  174,   57,  131,   14,   14,
       15,   57,   15,  152,  127,   15,  139,   52,   52,   15,
      114,   57,   15,  174,   15,   54,   15,   72,   54,   72,
       54,   72,   62,   15,   15,   18,  109,   62,  162,   18,
       54,   82,   18,   82,   18,   82,   58,   62,   62,   58,
      162,   58,   72,   18,   18,   20,  102,   60,   20,   60,
       20,   58,   96,   65,   92,   91,   65,   60,   65,   60,
       20,   20,   24,   68,   24,   68,   24,   78,   65,   90,

       78,   24,   78,   68,   24,   68,   24,  153,   94,  153,
       95,  153,   78,   94,   84,   95,   24,   27,   75,   27,
       99,   27,   97,   94,   94,   95,   27,   97,  120,   27,
      120,   27,   99,   99,  100,   64,  110,   97,  110,  100,
       53,   27,   27,   28,  120,   28,   46,   28,  103,  100,
      100,  103,  110,  103,  119,   28,  173,  119,  173,  119,
       36,  110,  124,  103,  173,   34,  129,   28,   29,  119,
       29,  129,   29,  121,  124,  124,  121,   29,  121,   25,
       22,  129,   29,  125,  121,  132,  128,    3,  125,  128,
      132,  128,   29,   30,  175,   30,  181,   30,  125,  125,

      132,  128,   30,    0,  176,   30,  130,   30,  181,  130,
      133,  130,  175,  133,  160,  133,  136,   30,   31,  160,
       31,  130,  176,  136,  140,  133,   31,   31,    0,  160,
       31,    0,   31,  177,  136,  136,  140,  140,  210,    0,
      187,  142,   31,   32,    0,   32,  142,    0,    0,   32,
      210,  177,   32,   32,   32,   32,  142,  142,  187,  150,
      188,  150,  178,  150,   32,   32,   40,  178,  184,   40,
        0,   40,  188,  188,  179,  184,  227,  178,  178,  179,
        0,   40,   40,   45,  150,   45,  184,  184,  191,  179,
        0,    0,   45,  191,  227,   45,  198,   45,  198,   45,

      201,  250,  201,  191,  191,  280,  212,   45,   47,  212,
       47,  212,  198,  209,  212,  213,  201,   47,  209,  250,
       47,  198,   47,  280,   47,  214,  217,  213,  209,  233,
      214,  240,   47,   47,   48,    0,   48,  215,  217,  217,
      214,  214,  215,  240,  240,    0,   48,  233,  218,  233,
       48,  221,  215,  218,  221,    0,  221,  228,   48,   49,
      224,   49,  228,  218,  218,  235,  221,  224,   49,  234,
      235,    0,  228,   49,    0,   49,  234,  296,  224,  224,
      235,  235,    0,   49,   50,  263,   50,  234,  234,  259,
      243,  259,  243,   50,  243,  296,   50,  259,   50,  264,

       50,  290,    0,  263,    0,  263,  264,  270,   50,   55,
        0,    0,   55,  290,   55,  301,    0,  264,  264,  270,
      270,    0,  266,    0,   55,   55,   63,  266,  273,   63,
      273,   63,    0,  301,  287,  301,    0,  266,  266,  287,
        0,   63,   63,   67,  273,   67,  307,   67,  288,  287,
      287,  286,   67,  288,  286,   67,  286,   67,  293,    0,
      286,    0,  319,  288,  307,  293,  307,   67,   67,   69,
      322,   69,  310,   69,  327,    0,  293,  293,  321,  310,
      319,   69,  319,  353,  362,    0,    0,  361,  322,    0,
      310,  310,  327,   69,   69,   70,  321,   70,  321,   70,

      367,  353,  362,  353,   70,  361,    0,  361,  326,   70,
      360,    0,    0,    0,  394,  326,    0,  360,  367,   70,
       70,   71,  421,   71,  366,   71,  326,  326,  360,  360,
       71,  366,  394,   71,  394,   71,  449,    0,    0,    0,
      421,    0,  366,  366,  400,   71,   71,   73,  396,   73,
      406,   73,    0,    0,  449,  396,   73,  418,  396,   73,
      396,   73,  400,    0,  400,    0,  409,    0,  406,  420,
      406,   73,   76,  409,   76,  418,   76,  418,    0,    0,
      429,   76,    0,    0,  409,  409,   76,  420,    0,  420,
      440,    0,    0,    0,    0,  447,   76,   77,  429,   77,

      429,   77,  447,    0,    0,  448,   77,    0,  440,   77,
      440,   77,    0,  447,  447,    0,    0,    0,    0,    0,
        0,   77,   79,  448,   79,  448,   79,    0,    0,    0,
        0,    0,    0,    0,   79,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   79,   80,    0,   80,
        0,   80,    0,    0,    0,    0,   80,    0,    0,    0,
        0,   80,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   80,   83,    0,   83,    0,    0,    0,    0,    0,
       83,   83,    0,    0,   83,    0,   83,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   83,   86,    0,   86,

        0,    0,    0,    0,    0,   86,    0,    0,    0,   86,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   86,   87,    0,   87,    0,    0,    0,    0,    0,
       87,   87,    0,    0,    0,    0,   87,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   87,   88,    0,   88,
        0,    0,    0,    0,    0,   88,   88,    0,    0,   88,
        0,   88,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   88,   89,    0,   89,    0,    0,    0,    0,    0,
        0,    0,   89,    0,   89,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   89,  105,    0,  105,    0,    0,

        0,    0,    0,    0,  105,    0,    0,  105,    0,  105,
        0,  105,    0,    0,    0,    0,    0,    0,    0,  105,
      105,  106,    0,  106,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  106,    0,    0,    0,  106,    0,    0,
        0,    0,    0,    0,    0,  106,  106,  107,    0,  107,
        0,    0,    0,    0,    0,    0,  107,    0,    0,    0,
        0,  107,    0,  107,    0,    0,    0,    0,    0,    0,
        0,  107,  107,  108,    0,  108,    0,    0,    0,    0,
        0,    0,  108,    0,    0,  108,    0,  108,    0,  108,
        0,    0,    0,    0,    0,    0,    0,  108,  108,  111,

        0,  111,    0,    0,    0,    0,    0,    0,  111,    0,
        0,  111,    0,  111,    0,  111,    0,    0,    0,    0,
        0,    0,    0,  111,  113,    0,  113,    0,    0,    0,
        0,    0,    0,  113,    0,    0,    0,    0,  113,    0,
      113,    0,    0,    0,    0,    0,    0,    0,  113,  115,
        0,  115,    0,    0,    0,    0,    0,    0,  115,    0,
        0,  115,    0,  115,    0,  115,    0,    0,    0,    0,
        0,    0,    0,  115,  116,    0,  116,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  116,    0,    0,    0,
      116,    0,    0,    0,    0,    0,    0,    0,  116,  117,

        0,  117,    0,    0,    0,    0,    0,    0,  117,    0,
        0,    0,    0,  117,    0,  117,    0,    0,    0,    0,
        0,    0,    0,  117,  118,    0,  118,    0,    0,    0,
        0,    0,    0,  118,    0,    0,  118,    0,  118,    0,
      118,    0,    0,    0,    0,    0,    0,    0,  118,  123,
        0,    0,  123,    0,  123,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  123,  123,  126,    0,    0,  126,
        0,  126,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  126,  126,  135,    0,    0,    0,  135,    0,    0,
      135,    0,  135,    0,    0,    0,    0,    0,    0,    0,

        0,  135,  135,  137,    0,    0,    0,  137,    0,    0,
        0,    0,  137,    0,    0,    0,    0,    0,    0,    0,
        0,  137,  137,  138,    0,    0,    0,  138,    0,    0,
      138,    0,  138,    0,    0,    0,    0,    0,    0,    0,
        0,  138,  138,  141,    0,  141,    0,  141,    0,    0,
        0,    0,    0,    0,    0,  141,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  141,  143,    0,
      143,    0,  143,    0,    0,    0,    0,  143,    0,    0,
        0,    0,  143,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  143,  143,  144,    0,  144,    0,  144,    0,

        0,    0,    0,  144,    0,    0,    0,    0,  144,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  144,  145,
        0,  145,    0,  145,    0,    0,    0,    0,  145,    0,
        0,  145,    0,  145,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  145,  145,  147,    0,  147,    0,  147,
        0,    0,    0,    0,    0,    0,    0,  147,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  147,
      147,  148,    0,  148,    0,  148,    0,    0,    0,    0,
      148,    0,    0,    0,    0,  148,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  148,  148,  149,    0,  149,

        0,  149,    0,    0,    0,    0,  149,    0,    0,  149,
        0,  149,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  149,  149,  151,    0,  151,    0,  151,    0,    0,
        0,    0,  151,    0,    0,  151,    0,  151,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  151,  154,    0,
      154,    0,  154,  154,    0,    0,    0,  154,    0,    0,
      154,    0,  154,    0,    0,    0,    0,    0,    0,    0,
        0,  154,  154,  155,    0,    0,    0,  155,    0,    0,
      155,    0,  155,    0,    0,    0,    0,    0,    0,    0,
        0,  155,  155,  156,    0,  156,    0,  156,  156,    0,

        0,    0,    0,    0,    0,  156,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  156,  156,  157,    0,
      157,    0,  157,  157,    0,    0,    0,  157,    0,    0,
        0,    0,  157,    0,    0,    0,    0,    0,    0,    0,
        0,  157,  157,  158,    0,  158,    0,  158,  158,    0,
        0,    0,  158,    0,    0,  158,    0,  158,    0,    0,
        0,    0,    0,    0,    0,    0,  158,  158,  159,    0,
      159,    0,  159,  159,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  159,  161,    0,  161,    0,  161,    0,    0,    0,

        0,  161,    0,    0,    0,    0,  161,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  161,  165,    0,  165,
        0,    0,    0,    0,    0,  165,    0,    0,    0,  165,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  165,  166,    0,  166,    0,    0,    0,    0,    0,
      166,  166,    0,    0,    0,    0,  166,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  166,  167,    0,  167,
        0,    0,    0,    0,    0,  167,  167,    0,    0,    0,
        0,  167,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  167,  168,    0,  168,    0,    0,    0,    0,    0,

      168,  168,    0,    0,  168,    0,  168,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  168,  169,    0,  169,
        0,    0,    0,    0,    0,  169,  169,    0,    0,  169,
        0,  169,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  169,  170,    0,  170,    0,    0,    0,    0,    0,
      170,    0,    0,    0,  170,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  170,  171,    0,  171,
        0,    0,    0,    0,    0,  171,  171,    0,    0,    0,
        0,  171,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  171,  180,    0,    0,    0,  180,    0,    0,    0,

        0,  180,    0,    0,    0,    0,    0,    0,    0,    0,
      180,  180,  189,    0,  189,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  189,    0,    0,    0,  189,    0,
        0,    0,    0,    0,    0,    0,  189,  190,    0,  190,
        0,    0,    0,    0,    0,    0,  190,    0,    0,    0,
        0,  190,    0,  190,    0,    0,    0,    0,    0,    0,
        0,  190,  190,  192,    0,  192,    0,    0,    0,    0,
        0,    0,  192,    0,    0,    0,    0,  192,    0,  192,
        0,    0,    0,    0,    0,    0,    0,  192,  193,    0,
      193,    0,    0,    0,    0,    0,    0,  193,    0,    0,

      193,    0,  193,    0,  193,    0,    0,    0,    0,    0,
        0,    0,  193,  193,  194,    0,  194,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  194,    0,    0,    0,
      194,    0,    0,    0,    0,    0,    0,    0,  194,  194,
      195,    0,  195,    0,    0,    0,    0,    0,    0,  195,
        0,    0,    0,    0,  195,    0,  195,    0,    0,    0,
        0,    0,    0,    0,  195,  195,  196,    0,  196,    0,
        0,    0,    0,    0,    0,  196,    0,    0,  196,    0,
      196,    0,  196,    0,    0,    0,    0,    0,    0,    0,
      196,  196,  199,    0,  199,    0,    0,    0,    0,    0,

        0,  199,    0,    0,  199,    0,  199,    0,  199,    0,
        0,    0,    0,    0,    0,    0,  199,  202,    0,  202,
        0,    0,  202,    0,    0,    0,  202,    0,    0,  202,
        0,  202,    0,  202,    0,    0,    0,    0,    0,    0,
      202,  202,  203,    0,  203,    0,    0,  203,    0,    0,
        0,    0,    0,    0,  203,    0,    0,    0,  203,    0,
        0,    0,    0,    0,    0,  203,  203,  204,    0,  204,
        0,    0,  204,    0,    0,    0,  204,    0,    0,    0,
        0,  204,    0,  204,    0,    0,    0,    0,    0,    0,
      204,  204,  205,    0,  205,    0,    0,  205,    0,    0,

        0,  205,    0,    0,  205,    0,  205,    0,  205,    0,
        0,    0,    0,    0,    0,  205,  205,  207,    0,  207,
        0,    0,  207,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  207,    0,    0,    0,    0,    0,    0,
      207,  208,    0,  208,    0,    0,    0,    0,    0,    0,
      208,    0,    0,    0,    0,  208,    0,  208,    0,    0,
        0,    0,    0,    0,    0,  208,  216,    0,    0,  216,
        0,  216,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  216,  216,  219,    0,    0,  219,    0,  219,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  219,  219,

      223,    0,    0,    0,  223,    0,    0,  223,    0,  223,
        0,    0,    0,    0,    0,    0,    0,    0,  223,  223,
      225,    0,    0,    0,  225,    0,    0,    0,    0,  225,
        0,    0,    0,    0,    0,    0,    0,    0,  225,  225,
      226,    0,    0,    0,  226,    0,    0,  226,    0,  226,
        0,    0,    0,    0,    0,    0,    0,    0,  226,  226,
      229,    0,    0,    0,  229,    0,    0,  229,    0,  229,
        0,    0,    0,    0,    0,    0,    0,    0,  229,  229,
      229,  230,    0,    0,    0,    0,    0,    0,  230,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  230,

      230,  230,  231,    0,    0,    0,  231,    0,    0,    0,
        0,  231,    0,    0,    0,    0,    0,    0,    0,    0,
      231,  231,  231,  232,    0,    0,    0,  232,    0,    0,
      232,    0,  232,    0,    0,    0,    0,    0,    0,    0,
        0,  232,  232,  232,  236,    0,  236,    0,  236,    0,
        0,    0,    0,  236,    0,    0,    0,    0,  236,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  236,  236,
      237,    0,  237,    0,  237,    0,    0,    0,    0,  237,
        0,    0,    0,    0,  237,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  237,  238,    0,    0,    0,  238,

        0,    0,    0,    0,  238,    0,    0,    0,    0,    0,
        0,    0,    0,  238,  238,  239,    0,  239,    0,  239,
      239,    0,    0,    0,  239,    0,    0,    0,    0,  239,
        0,    0,    0,    0,    0,    0,    0,    0,  239,  239,
      241,    0,  241,    0,  241,    0,    0,    0,    0,    0,
        0,    0,  241,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  241,  244,    0,  244,    0,  244,
      244,    0,    0,    0,  244,    0,    0,  244,    0,  244,
        0,    0,    0,    0,    0,    0,    0,    0,  244,  244,
      245,    0,    0,    0,  245,    0,    0,  245,    0,  245,

        0,    0,    0,    0,    0,    0,    0,    0,  245,  245,
      246,    0,  246,    0,  246,  246,    0,    0,    0,    0,
        0,    0,  246,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  246,  246,  248,    0,  248,    0,  248,
      248,    0,    0,    0,  248,    0,    0,  248,    0,  248,
        0,    0,    0,    0,    0,    0,    0,    0,  248,  248,
      249,    0,  249,    0,  249,  249,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  249,  251,    0,  251,    0,  251,  251,
        0,    0,    0,  251,    0,    0,  251,    0,  251,    0,

        0,    0,    0,    0,    0,    0,    0,  251,  251,  251,
      252,    0,  252,    0,  252,  252,    0,    0,    0,    0,
        0,    0,  252,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  252,  252,  252,  253,    0,  253,    0,
      253,  253,    0,    0,    0,  253,    0,    0,    0,    0,
      253,    0,    0,    0,    0,    0,    0,    0,    0,  253,
      253,  253,  254,    0,  254,    0,  254,  254,    0,    0,
        0,  254,    0,    0,  254,    0,  254,    0,    0,    0,
        0,    0,    0,    0,    0,  254,  254,  254,  255,    0,
      255,    0,  255,  255,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  255,    0,  255,  256,    0,  256,    0,    0,    0,
        0,    0,  256,  256,    0,    0,    0,    0,  256,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  256,  257,
        0,  257,    0,    0,    0,    0,    0,  257,  257,    0,
        0,    0,    0,  257,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  257,  258,    0,  258,    0,    0,    0,
        0,    0,  258,    0,    0,    0,  258,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  258,  260,
        0,    0,    0,  260,    0,    0,    0,    0,  260,    0,

        0,    0,    0,    0,    0,    0,    0,  260,  260,  261,
        0,    0,    0,  261,    0,    0,    0,    0,  261,    0,
        0,    0,    0,    0,    0,    0,    0,  261,  261,  261,
      262,    0,    0,    0,    0,    0,    0,  262,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  262,  262,
      262,  265,    0,  265,    0,    0,    0,    0,    0,    0,
      265,    0,    0,    0,    0,  265,    0,  265,    0,    0,
        0,    0,    0,    0,    0,  265,  265,  267,    0,  267,
        0,    0,    0,    0,    0,    0,  267,    0,    0,    0,
        0,  267,    0,  267,    0,    0,    0,    0,    0,    0,

        0,  267,  268,    0,  268,    0,    0,  268,    0,    0,
        0,  268,    0,    0,    0,    0,  268,    0,  268,    0,
        0,    0,    0,    0,    0,  268,  268,  269,    0,    0,
        0,  269,    0,    0,    0,    0,  269,    0,    0,    0,
        0,    0,    0,    0,    0,  269,  269,  271,    0,  271,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  271,
        0,    0,    0,  271,    0,    0,    0,    0,    0,    0,
        0,  271,  274,    0,  274,    0,    0,  274,    0,    0,
        0,  274,    0,    0,  274,    0,  274,    0,  274,    0,
        0,    0,    0,    0,    0,  274,  274,  275,    0,  275,

        0,    0,  275,    0,    0,    0,    0,    0,    0,  275,
        0,    0,    0,  275,    0,    0,    0,    0,    0,    0,
      275,  275,  277,    0,  277,    0,    0,  277,    0,    0,
        0,  277,    0,    0,  277,    0,  277,    0,  277,    0,
        0,    0,    0,    0,    0,  277,  277,  278,    0,    0,
        0,  278,    0,    0,  278,    0,  278,    0,    0,    0,
        0,    0,    0,    0,    0,  278,  278,  279,    0,  279,
        0,    0,  279,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  279,    0,    0,    0,    0,    0,    0,
      279,  281,    0,  281,    0,    0,  281,    0,    0,    0,

      281,    0,    0,  281,    0,  281,    0,  281,    0,    0,
        0,    0,    0,    0,  281,  281,  281,  282,    0,  282,
        0,    0,  282,    0,    0,    0,    0,    0,    0,  282,
        0,    0,    0,  282,    0,    0,    0,    0,    0,    0,
      282,  282,  282,  283,    0,  283,    0,    0,  283,    0,
        0,    0,  283,    0,    0,    0,    0,  283,    0,  283,
        0,    0,    0,    0,    0,    0,  283,  283,  283,  284,
        0,  284,    0,    0,  284,    0,    0,    0,  284,    0,
        0,  284,    0,  284,    0,  284,    0,    0,    0,    0,
        0,    0,  284,  284,  284,  285,    0,  285,    0,    0,

      285,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  285,    0,    0,    0,    0,    0,    0,  285,    0,
      285,  289,    0,    0,    0,  289,    0,    0,    0,    0,
      289,    0,    0,    0,    0,    0,    0,    0,    0,  289,
      289,  292,    0,    0,    0,  292,    0,    0,  292,    0,
      292,    0,    0,    0,    0,    0,    0,    0,    0,  292,
      292,  295,    0,    0,    0,  295,    0,    0,  295,    0,
      295,    0,    0,    0,    0,    0,    0,    0,    0,  295,
      295,  297,    0,    0,    0,  297,    0,    0,  297,    0,
      297,    0,    0,    0,    0,    0,    0,    0,    0,  297,

      297,  297,  298,    0,    0,    0,    0,    0,    0,  298,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      298,  298,  298,  299,    0,    0,    0,  299,    0,    0,
        0,    0,  299,    0,    0,    0,    0,    0,    0,    0,
        0,  299,  299,  299,  300,    0,    0,    0,  300,    0,
        0,  300,    0,  300,    0,    0,    0,    0,    0,    0,
        0,    0,  300,  300,  300,  302,    0,    0,    0,  302,
        0,    0,  302,    0,  302,    0,    0,    0,    0,    0,
        0,    0,    0,  302,  302,  302,  303,    0,    0,    0,
      303,    0,    0,  303,    0,  303,    0,    0,    0,    0,

        0,    0,    0,    0,  303,  303,  303,  304,    0,    0,
        0,    0,    0,    0,  304,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  304,  304,  304,  305,    0,
        0,    0,  305,    0,    0,    0,    0,  305,    0,    0,
        0,    0,    0,    0,    0,    0,  305,  305,  305,  306,
        0,    0,    0,  306,    0,    0,  306,    0,  306,    0,
        0,    0,    0,    0,    0,    0,    0,  306,  306,  306,
      308,    0,    0,    0,  308,    0,    0,  308,    0,  308,
        0,    0,    0,    0,    0,    0,    0,    0,  308,  308,
      309,    0,    0,    0,    0,    0,    0,  309,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  309,  309,
      309,  311,    0,    0,    0,  311,    0,    0,    0,    0,
      311,    0,    0,    0,    0,    0,    0,    0,    0,  311,
      311,  311,  312,    0,    0,    0,  312,    0,    0,    0,
        0,  312,    0,    0,    0,    0,    0,    0,    0,    0,
      312,  312,  312,  314,    0,    0,    0,  314,    0,    0,
      314,    0,  314,    0,    0,    0,    0,    0,    0,    0,
        0,  314,  314,  314,  316,    0,    0,    0,    0,    0,
        0,  316,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  316,  316,  316,  323,    0,    0,    0,  323,

        0,    0,    0,    0,  323,    0,    0,    0,    0,    0,
        0,    0,    0,  323,  323,  324,    0,  324,    0,  324,
      324,    0,    0,    0,  324,    0,    0,    0,    0,  324,
        0,    0,    0,    0,    0,    0,    0,    0,  324,  324,
      325,    0,  325,    0,  325,  325,    0,    0,    0,  325,
        0,    0,    0,    0,  325,    0,    0,    0,    0,    0,
        0,    0,    0,  325,  325,  325,  328,    0,  328,    0,
      328,  328,    0,    0,    0,    0,    0,    0,  328,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  328,
      328,  328,  329,    0,  329,    0,  329,  329,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  329,    0,  329,  330,    0,
      330,    0,  330,  330,    0,    0,    0,  330,    0,    0,
      330,    0,  330,    0,    0,    0,    0,    0,    0,    0,
        0,  330,  330,  330,  332,    0,  332,    0,  332,  332,
        0,    0,    0,  332,    0,    0,  332,    0,  332,    0,
        0,    0,    0,    0,    0,    0,    0,  332,  332,  332,
      333,    0,  333,    0,  333,  333,    0,    0,    0,    0,
        0,    0,  333,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  333,  333,  333,  334,    0,  334,    0,

      334,  334,    0,    0,    0,  334,    0,    0,    0,    0,
      334,    0,    0,    0,    0,    0,    0,    0,    0,  334,
      334,  334,  335,    0,  335,    0,  335,  335,    0,    0,
        0,  335,    0,    0,  335,    0,  335,    0,    0,    0,
        0,    0,    0,    0,    0,  335,  335,  335,  336,    0,
      336,    0,  336,  336,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  336,    0,  336,  337,    0,  337,    0,  337,  337,
        0,    0,    0,  337,    0,    0,  337,    0,  337,    0,
        0,    0,    0,    0,    0,    0,    0,  337,  337,  339,

        0,  339,    0,  339,  339,    0,    0,    0,    0,    0,
        0,  339,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  339,  339,  339,  340,    0,  340,    0,  340,
      340,    0,    0,    0,    0,    0,    0,  340,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  340,  340,
      342,    0,  342,    0,  342,  342,    0,    0,    0,  342,
        0,    0,    0,    0,  342,    0,    0,    0,    0,    0,
        0,    0,    0,  342,  342,  342,  343,    0,  343,    0,
      343,  343,    0,    0,    0,  343,    0,    0,    0,    0,
      343,    0,    0,    0,    0,    0,    0,    0,    0,  343,

      343,  343,  344,    0,  344,    0,  344,  344,    0,    0,
        0,  344,    0,    0,    0,    0,  344,    0,    0,    0,
        0,    0,    0,    0,    0,  344,  344,  345,    0,  345,
        0,  345,  345,    0,    0,    0,  345,    0,    0,  345,
        0,  345,    0,    0,    0,    0,    0,    0,    0,    0,
      345,  345,  345,  348,    0,  348,    0,  348,  348,    0,
        0,    0,    0,    0,    0,  348,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  348,  348,  348,  351,
        0,  351,    0,  351,  351,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,  351,    0,  351,  352,    0,  352,    0,  352,
      352,    0,    0,    0,  352,    0,    0,  352,    0,  352,
        0,    0,    0,    0,    0,    0,    0,    0,  352,  352,
      354,    0,  354,    0,  354,  354,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  354,    0,  354,  355,    0,  355,    0,
      355,  355,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  355,
      358,    0,    0,    0,  358,    0,    0,    0,    0,  358,
        0,    0,    0,    0,    0,    0,    0,    0,  358,  358,

      363,    0,  363,    0,    0,  363,    0,    0,    0,  363,
        0,    0,    0,    0,  363,    0,  363,    0,    0,    0,
        0,    0,    0,  363,  363,  365,    0,  365,    0,    0,
      365,    0,    0,    0,  365,    0,    0,    0,    0,  365,
        0,  365,    0,    0,    0,    0,    0,    0,  365,  365,
      365,  368,    0,  368,    0,    0,  368,    0,    0,    0,
        0,    0,    0,  368,    0,    0,    0,  368,    0,    0,
        0,    0,    0,    0,  368,  368,  368,  369,    0,  369,
        0,    0,  369,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  369,    0,    0,    0,    0,    0,    0,

      369,    0,  369,  370,    0,  370,    0,    0,  370,    0,
        0,    0,  370,    0,    0,  370,    0,  370,    0,  370,
        0,    0,    0,    0,    0,    0,  370,  370,  370,  371,
        0,  371,    0,    0,  371,    0,    0,    0,  371,    0,
        0,  371,    0,  371,    0,  371,    0,    0,    0,    0,
        0,    0,  371,  371,  371,  372,    0,  372,    0,    0,
      372,    0,    0,    0,    0,    0,    0,  372,    0,    0,
        0,  372,    0,    0,    0,    0,    0,    0,  372,  372,
      372,  373,    0,  373,    0,    0,  373,    0,    0,    0,
      373,    0,    0,    0,    0,  373,    0,  373,    0,    0,

        0,    0,    0,    0,  373,  373,  373,  374,    0,  374,
        0,    0,  374,    0,    0,    0,  374,    0,    0,  374,
        0,  374,    0,  374,    0,    0,    0,    0,    0,    0,
      374,  374,  374,  376,    0,  376,    0,    0,  376,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  376,
        0,    0,    0,    0,    0,    0,  376,    0,  376,  377,
        0,  377,    0,    0,  377,    0,    0,    0,  377,    0,
        0,  377,    0,  377,    0,  377,    0,    0,    0,    0,
        0,    0,  377,  377,  378,    0,  378,    0,    0,  378,
        0,    0,    0,    0,    0,    0,  378,    0,    0,    0,

      378,    0,    0,    0,    0,    0,    0,  378,  378,  378,
      380,    0,  380,    0,    0,  380,    0,    0,    0,    0,
        0,    0,  380,    0,    0,    0,  380,    0,    0,    0,
        0,    0,    0,  380,  380,  381,    0,  381,    0,    0,
      381,    0,    0,    0,  381,    0,    0,    0,    0,  381,
        0,  381,    0,    0,    0,    0,    0,    0,  381,  381,
      381,  382,    0,  382,    0,    0,  382,    0,    0,    0,
      382,    0,    0,    0,    0,  382,    0,  382,    0,    0,
        0,    0,    0,    0,  382,  382,  382,  384,    0,  384,
        0,    0,  384,    0,    0,    0,  384,    0,    0,    0,

        0,  384,    0,  384,    0,    0,    0,    0,    0,    0,
      384,  384,  385,    0,  385,    0,    0,  385,    0,    0,
        0,  385,    0,    0,  385,    0,  385,    0,  385,    0,
        0,    0,    0,    0,    0,  385,  385,  385,  387,    0,
      387,    0,    0,  387,    0,    0,    0,    0,    0,    0,
      387,    0,    0,    0,  387,    0,    0,    0,    0,    0,
        0,  387,  387,  387,  391,    0,  391,    0,    0,  391,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      391,    0,    0,    0,    0,    0,    0,  391,    0,  391,
      392,    0,  392,    0,    0,  392,    0,    0,    0,  392,

        0,    0,  392,    0,  392,    0,  392,    0,    0,    0,
        0,    0,    0,  392,  392,  393,    0,  393,    0,    0,
      393,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  393,    0,    0,    0,    0,    0,    0,  393,    0,
      393,  395,    0,  395,    0,    0,  395,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  395,    0,    0,
        0,    0,    0,    0,  395,  397,    0,    0,    0,  397,
        0,    0,    0,    0,  397,    0,    0,    0,    0,    0,
        0,    0,    0,  397,  397,  398,    0,    0,    0,  398,
        0,    0,    0,    0,  398,    0,    0,    0,    0,    0,

        0,    0,    0,  398,  398,  398,  399,    0,    0,    0,
        0,    0,    0,  399,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  399,  399,  399,  401,    0,    0,
        0,  401,    0,    0,  401,    0,  401,    0,    0,    0,
        0,    0,    0,    0,    0,  401,  401,  401,  402,    0,
        0,    0,  402,    0,    0,  402,    0,  402,    0,    0,
        0,    0,    0,    0,    0,    0,  402,  402,  402,  403,
        0,    0,    0,    0,    0,    0,  403,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  403,  403,  403,
      404,    0,    0,    0,  404,    0,    0,    0,    0,  404,

        0,    0,    0,    0,    0,    0,    0,    0,  404,  404,
      404,  405,    0,    0,    0,  405,    0,    0,  405,    0,
      405,    0,    0,    0,    0,    0,    0,    0,    0,  405,
      405,  405,  407,    0,    0,    0,  407,    0,    0,  407,
        0,  407,    0,    0,    0,    0,    0,    0,    0,    0,
      407,  407,  408,    0,    0,    0,    0,    0,    0,  408,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      408,  408,  408,  410,    0,    0,    0,  410,    0,    0,
        0,    0,  410,    0,    0,    0,    0,    0,    0,    0,
        0,  410,  410,  410,  411,    0,    0,    0,  411,    0,

        0,    0,    0,  411,    0,    0,    0,    0,    0,    0,
        0,    0,  411,  411,  411,  412,    0,    0,    0,  412,
        0,    0,    0,    0,  412,    0,    0,    0,    0,    0,
        0,    0,    0,  412,  412,  413,    0,    0,    0,  413,
        0,    0,  413,    0,  413,    0,    0,    0,    0,    0,
        0,    0,    0,  413,  413,  413,  415,    0,    0,    0,
        0,    0,    0,  415,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  415,  415,  415,  419,    0,    0,
        0,  419,    0,    0,  419,    0,  419,    0,    0,    0,
        0,    0,    0,    0,    0,  419,  419,  422,    0,    0,

        0,  422,    0,    0,    0,    0,  422,    0,    0,    0,
        0,    0,    0,    0,    0,  422,  422,  422,  423,    0,
      423,    0,  423,  423,    0,    0,    0,  423,    0,    0,
        0,    0,  423,    0,    0,    0,    0,    0,    0,    0,
        0,  423,  423,  423,  424,    0,  424,    0,  424,  424,
        0,    0,    0,  424,    0,    0,    0,    0,  424,    0,
        0,    0,    0,    0,    0,    0,    0,  424,  424,  424,
      425,    0,  425,    0,  425,  425,    0,    0,    0,  425,
        0,    0,    0,    0,  425,    0,    0,    0,    0,    0,
        0,    0,    0,  425,  425,  426,    0,    0,    0,    0,

        0,    0,  426,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  426,  426,  426,  427,    0,  427,    0,
      427,  427,    0,    0,    0,    0,    0,    0,  427,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  427,
      427,  427,  428,    0,  428,    0,  428,  428,    0,    0,
        0,    0,    0,    0,  428,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  428,  428,  430,    0,  430,
        0,  430,  430,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      430,    0,  430,  431,    0,  431,    0,  431,  431,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  431,  434,    0,    0,
        0,  434,    0,    0,    0,    0,  434,    0,    0,    0,
        0,    0,    0,    0,    0,  434,  434,  434,  435,    0,
      435,    0,    0,  435,    0,    0,    0,  435,    0,    0,
        0,    0,  435,    0,  435,    0,    0,    0,    0,    0,
        0,  435,  435,  437,    0,    0,    0,    0,    0,    0,
      437,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  437,  437,  437,  438,    0,  438,    0,    0,  438,
        0,    0,    0,    0,    0,    0,  438,    0,    0,    0,

      438,    0,    0,    0,    0,    0,    0,  438,  438,  441,
        0,  441,    0,    0,  441,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  441,    0,    0,    0,    0,
        0,    0,  441,  445,    0,    0,    0,  445,    0,    0,
        0,    0,  445,    0,    0,    0,    0,    0,    0,    0,
        0,  445,  445,  452,    0,    0,    0,  452,  452,  453,
      453,    0,  453,  453,  453,  453,  454,    0,    0,    0,
      454,  455,    0,    0,    0,    0,  455,  456,    0,    0,
        0,  456,  456,  456,  457,  457,    0,  457,  457,  457,
      457,  458,    0,    0,    0,  458,  458,  458,  459,    0,

        0,    0,  459,  459,  459,  460,  460,    0,  460,  460,
      460,  460,  461,  461,    0,  461,  461,  461,  461,  462,
      462,    0,  462,  462,  462,  462,  463,  463,    0,  463,
      463,  463,  463,  464,  464,    0,  464,  464,  464,  464,
      465,  465,    0,  465,  465,  465,  465,  466,    0,    0,
        0,  466,  466,  466,  467,    0,    0,    0,  467,  467,
      467,  468,    0,    0,    0,  468,  468,  468,  469,    0,
        0,    0,  469,  469,  469,  470,    0,    0,    0,  470,
      470,  470,  471,    0,    0,    0,  471,  471,  471,  472,
      472,    0,  472,  472,  472,  472,  473,  473,    0,  473,

      473,  473,  473,  474,  474,    0,  474,  474,  474,  474,
      475,  475,    0,  475,  475,  475,  475,  476,  476,    0,
      476,  476,  476,  476,  477,    0,    0,    0,  477,  477,
      477,  478,    0,    0,    0,  478,  478,  478,  479,    0,
        0,    0,  479,  479,  479,  480,    0,    0,    0,  480,
      480,  480,  481,    0,    0,    0,  481,  481,  481,  482,
        0,    0,    0,  482,  482,  482,  483,    0,    0,    0,
      483,  483,  483,  484,  484,    0,  484,  484,  484,  484,
      485,  485,    0,  485,  485,  485,  485,  486,  486,    0,
      486,  486,  486,  486,  487,  487,    0,  487,  487,  487,

      487,  488,  488,    0,  488,  488,  488,  488,  489,  489,
        0,  489,  489,  489,  489,  490,  490,    0,  490,  490,
      490,  490,  491,  491,    0,  491,  491,  491,  491,  492,
      492,    0,  492,  492,  492,  492,  493,  493,    0,  493,
      493,  493,  493,  494,  494,    0,  494,  494,  494,  494,
      495,  495,    0,  495,  495,  495,  495,  496,    0,    0,
        0,  496,  496,  496,  497,    0,    0,    0,  497,  497,
      497,  498,    0,    0,    0,  498,  498,  498,  499,    0,
        0,    0,  499,  499,  499,  500,    0,    0,    0,  500,
      500,  500,  501,    0,    0,    0,  501,  501,  501,  502,

      502,    0,  502,  502,  502,  502,  503,  503,    0,  503,
      503,  503,  503,  504,  504,    0,  504,  504,  504,  504,
      505,  505,    0,  505,  505,  505,  505,  506,  506,    0,
      506,  506,  506,  506,  507,  507,    0,  507,  507,  507,
      507,  508,  508,    0,  508,  508,  508,  508,  509,  509,
        0,  509,  509,  509,  509,  510,  510,    0,  510,  510,
      510,  510,  511,    0,    0,    0,  511,  511,  512,    0,
        0,    0,  512,  512,  512,  513,    0,    0,    0,  513,
      513,  513,  514,    0,    0,    0,  514,  514,  514,  515,
        0,    0,    0,  515,  515,  515,  516,    0,    0,    0,

      516,  516,  516,  517,    0,    0,    0,  517,  517,  517,
      518,    0,    0,    0,  518,  518,  518,  519,    0,    0,
        0,  519,  519,  519,  520,    0,    0,    0,  520,  520,
      520,  521,    0,    0,    0,  521,  521,  521,  522,    0,
        0,    0,  522,  522,  522,  523,    0,    0,    0,  523,
      523,  523,  524,    0,    0,    0,  524,  524,  524,  525,
      525,    0,  525,  525,  525,  525,  526,    0,    0,    0,
      526,  526,  526,  527,  527,    0,  527,  527,  527,  527,
      528,  528,    0,  528,  528,  528,  528,  529,  529,    0,
      529,  529,  529,  529,  530,  530,    0,  530,  530,  530,

      530,  531,  531,    0,  531,  531,  531,  531,  532,  532,
        0,  532,  532,  532,  532,  533,    0,    0,    0,  533,
      533,  533,  534,  534,    0,  534,  534,  534,  534,  535,
      535,    0,  535,  535,  535,  535,  536,    0,    0,    0,
      536,  536,  536,  537,  537,    0,  537,  537,  537,  537,
      538,    0,    0,    0,  538,  538,  538,  539,    0,    0,
        0,  539,  539,  539,  540,  540,    0,  540,  540,  540,
      540,  541,  541,    0,  541,  541,  541,  541,  542,  542,
        0,  542,  542,  542,  542,  543,  543,    0,  543,  543,
      543,  543,  544,  544,    0,  544,  544,  544,  544,  545,

      545,    0,  545,  545,  545,  545,  546,  546,    0,  546,
      546,  546,  546,  547,    0,    0,    0,  547,  547,  547,
      548,    0,    0,    0,  548,  548,  548,  549,    0,    0,
        0,  549,  549,  549,  550,    0,    0,    0,  550,  550,
      550,  551,  551,    0,  551,  551,  551,  551,  552,  552,
        0,  552,  552,  552,  552,  553,  553,    0,  553,  553,
      553,  553,  554,  554,    0,  554,  554,  554,  554,  555,
      555,    0,  555,  555,  555,  555,  556,  556,    0,  556,
      556,  556,  556,  557,  557,    0,  557,  557,  557,  557,
      558,  558,    0,  558,  558,  558,  558,  559,  559,    0,

      559,  559,  559,  559,  560,  560,    0,  560,  560,  560,
      560,  561,    0,    0,    0,  561,  561,  562,    0,    0,
        0,  562,  562,  562,  563,    0,    0,    0,  563,  563,
      563,  564,    0,    0,    0,  564,  564,  564,  565,    0,
        0,    0,  565,  565,  565,  566,    0,    0,    0,  566,
      566,  566,  567,    0,    0,    0,  567,  567,  567,  568,
        0,    0,    0,  568,  568,  568,  569,    0,    0,    0,
      569,  569,  569,  570,    0,    0,    0,  570,  570,  570,
      571,    0,    0,    0,  571,  571,  571,  572,    0,    0,
        0,  572,  572,  572,  573,    0,    0,    0,  573,  573,

      573,  574,    0,    0,    0,  574,  574,  574,  575,    0,
        0,    0,  575,  575,  575,  576,    0,    0,    0,  576,
      576,  576,  577,    0,    0,    0,  577,  577,  577,  578,
      578,    0,  578,  578,  578,  578,  579,  579,    0,  579,
      579,  579,  579,  580,    0,    0,    0,  580,  580,  580,
      581,    0,    0,    0,  581,  581,  581,  582,  582,    0,
      582,  582,  582,  582,  583,    0,    0,    0,  583,  583,
      583,  584,  584,    0,  584,  584,  584,  584,  585,  585,
        0,  585,  585,  585,  585,  586,    0,    0,    0,  586,
      586,  586,  587,    0,    0,    0,  587,  587,  587,  588,

      588,    0,  588,  588,  588,  588,  589,  589,    0,  589,
      589,  589,  589,  590,  590,    0,  590,  590,  590,  590,
      591,  591,    0,  591,  591,  591,  591,  592,  592,    0,
      592,  592,  592,  592,  593,  593,    0,  593,  593,  593,
      593,  594,  594,    0,  594,  594,  594,  594,  595,  595,
        0,  595,  595,  595,  595,  596,    0,    0,    0,  596,
      596,  596,  597,    0,    0,    0,  597,  597,  597,  598,
        0,    0,    0,  598,  598,  598,  599,    0,    0,    0,
      599,  599,  599,  600,  600,    0,  600,  600,  600,  600,
      601,  601,    0,  601,  601,  601,  601,  602,  602,    0,

      602,  602,  602,  602,  603,  603,    0,  603,  603,  603,
      603,  604,  604,    0,  604,  604,  604,  604,  605,  605,
        0,  605,  605,  605,  605,  606,  606,    0,  606,  606,
      606,  606,  607,  607,    0,  607,  607,  607,  607,  608,
      608,    0,  608,  608,  608,  608,  609,  609,    0,  609,
      609,  609,  609,  610,    0,    0,    0,  610,  610,  611,
        0,    0,    0,  611,  611,  611,  612,    0,    0,    0,
      612,  612,  612,  613,    0,    0,    0,  613,  613,  613,
      614,    0,    0,    0,  614,  614,  614,  615,    0,    0,
        0,  615,  615,  615,  616,    0,    0,    0,  616,  616,

      616,  617,    0,    0,    0,  617,  617,  617,  618,    0,
        0,    0,  618,  618,  618,  619,    0,    0,    0,  619,
      619,  619,  620,    0,    0,    0,  620,  620,  620,  621,
        0,    0,    0,  621,  621,  621,  622,    0,    0,    0,
      622,  622,  622,  623,    0,    0,    0,  623,  623,  623,
      624,    0,    0,    0,  624,  624,  624,  625,    0,    0,
        0,  625,  625,  625,  626,    0,    0,    0,  626,  626,
      626,  627,    0,    0,    0,  627,  627,  627,  628,  628,
        0,  628,  628,  628,  628,  629,  629,    0,  629,  629,
      629,  629,  630,    0,    0,    0,  630,  630,  630,  631,

        0,    0,    0,  631,  631,  631,  632,  632,    0,  632,
      632,  632,  632,  633,  633,    0,  633,  633,  633,  633,
      634,  634,    0,  634,  634,  634,  634,  635,  635,    0,
      635,  635,  635,  635,  636,  636,    0,  636,  636,  636,
      636,  637,  637,    0,  637,  637,  637,  637,  638,  638,
        0,  638,  638,  638,  638,  639,  639,    0,  639,  639,
      639,  639,  640,  640,    0,  640,  640,  640,  640,  641,
      641,    0,  641,  641,  641,  641,  642,  642,    0,  642,
      642,  642,  642,  643,  643,    0,  643,  643,  643,  643,
      644,  644,    0,  644,  644,  644,  644,  645,  645,    0,

      645,  645,  645,  645,  646,  646,    0,  646,  646,  646,
      646,  647,  647,    0,  647,  647,  647,  647,  648,  648,
        0,  648,  648,  648,  648,  649,  649,    0,  649,  649,
      649,  649,  650,  650,    0,  650,  650,  650,  650,  651,
      651,    0,  651,  651,  651,  651,  652,  652,    0,  652,
      652,  652,  652,  653,  653,    0,  653,  653,  653,  653,
      654,  654,    0,  654,  654,  654,  654,  655,  655,    0,
      655,  655,  655,  655,  656,  656,    0,  656,  656,  656,
      656,  657,  657,    0,  657,  657,  657,  657,  658,    0,
        0,  658,  658,  658,  659,    0,    0,    0,  659,  659,

      659,  660,    0,    0,    0,  660,  660,  660,  661,    0,
        0,    0,  661,  661,  661,  662,    0,    0,    0,  662,
      662,  662,  663,    0,    0,    0,  663,  663,  663,  664,
        0,    0,    0,  664,  664,  664,  665,    0,    0,    0,
      665,  665,  665,  666,    0,    0,    0,  666,  666,  666,
      667,    0,    0,    0,  667,  667,  667,  668,    0,    0,
        0,  668,  668,  668,  669,    0,    0,    0,  669,  669,
      669,  670,    0,    0,    0,  670,  670,  670,  671,    0,
        0,    0,  671,  671,  671,  672,    0,    0,    0,  672,
      672,  672,  673,    0,    0,    0,  673,  673,  673,  674,

      674,    0,  674,  674,  674,  674,  675,  675,    0,  675,
      675,  675,  675,  676,    0,    0,    0,  676,  676,  676,
      677,  677,    0,  677,  677,  677,  677,  678,  678,    0,
      678,  678,  678,  678,  679,    0,    0,    0,  679,  679,
      679,  680,  680,    0,  680,  680,  680,  680,  681,  681,
        0,  681,  681,  681,  681,  682,  682,    0,  682,  682,
      682,  682,  683,  683,    0,  683,  683,  683,  683,  684,
      684,    0,  684,  684,  684,  684,  685,    0,    0,    0,
      685,  685,  685,  686,    0,    0,    0,  686,  686,  686,
      687,    0,    0,    0,  687,  687,  687,  451,  451,  451,

      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451,  451,  451,  451,  451,
      451,  451,  451,  451,  451,  451
    } ;

/* Table of booleans, true if rule could match eol. */
static const flex_int32_t yy_rule_can_match_eol[24] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0,     };

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#ifndef YYLMAX
#define YYLMAX 8192
#endif

char yytext[YYLMAX];
char *yytext_ptr;
#line 1 "shell.l"
/*
 *
 * CS-252 
 * shell.l: lexical analyzer for shell
 * You have to extend it.
 *
 */
#line 11 "shell.l"

#include <cstring>
#include "y.tab.hh"
#include <sys/wait.h>
static  void yyunput (int c,char *buf_ptr  );
#include "command.hh"
extern int status;
extern int backproc;
extern std::string p;
extern std::vector<std::vector<std::string>> history; 
void myunputc(int c) {
  unput(c);
}
#include <string.h>
//#include "y.tab.hh"
extern "C" char * read_line();

int mygetc(FILE * f){
    static char *p;
    char ch;
    if(!isatty(0)){
      return getc(f);
    }
    if(p==NULL || *p==0){
      char *s = read_line();
      p = s;
    }

    ch = *p;
    p++;

    return ch;
}

#undef getc
#define getc(f) mygetc(f)





#line 2287 "lex.yy.cc"
#line 2288 "lex.yy.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 56 "shell.l"


#line 2508 "lex.yy.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 452 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 7098 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					
    yylineno++;
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 58 "shell.l"
{
  return NEWLINE;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 62 "shell.l"
{
  /* Discard spaces and tabs */
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 66 "shell.l"
{
  return GREAT;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 70 "shell.l"
{
  return GREATGREAT;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 74 "shell.l"
{
  return LESS;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 78 "shell.l"
{
  return PIPE;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 82 "shell.l"
{
  return AMPERSAND;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 86 "shell.l"
{
  return NOTOKEN;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 90 "shell.l"
{
  return GREATAMPERSAND;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 94 "shell.l"
{
  return GREATGREATAMPERSAND;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 98 "shell.l"
{
  return TWOGREAT;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 102 "shell.l"
{ /*source builtin command*/
  std::string cmd = std::string(yytext);
  cmd = cmd.erase(0,7);
  //fprintf(stderr,"%s\n",cmd.c_str());
  yyin = fopen(cmd.c_str(), "r");
  yypush_buffer_state(yy_create_buffer( yyin, YY_BUF_SIZE ));
  BEGIN(INITIAL);
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
#line 110 "shell.l"
{
	yypop_buffer_state();
  
  if ( !YY_CURRENT_BUFFER ) {
    yyterminate();
  } 
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 119 "shell.l"
{
  std::string str = std::string(yytext);
  std::string home = getenv("HOME");
  if(str.size() == 1) {
    yylval.cpp_string = new std::string(home);
  }else{
    if(str[1] == '/') {
      str = home + str.substr(1,-1);
    }else{
      str = std::string("/homes/") +str.substr(1,-1);
    }
    yylval.cpp_string = new std::string(str);
  }
  return WORD;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 135 "shell.l"
{
 //  fprintf(stdout, "val: %s\n", cmd.c_str());
   int  result = getpid();
   char  buff[100];
   sprintf(buff,"%d", result);
   yylval.cpp_string =  new std::string(buff);
   return WORD;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 144 "shell.l"
{
  char buf[100];
  sprintf(buf,"%d", status);
  yylval.cpp_string = new std::string(buf);
  return WORD;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 151 "shell.l"
{
//PID of last processes running in background
  char buff[100];
  sprintf(buff, "%d", backproc);
  yylval.cpp_string = new std::string(buff);
  return WORD;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 159 "shell.l"
{
//the last argument in the fully expanded previous command
  int a = 0;
  int b = history.at(a).size()-1;
  std::string lastComm = history.at(a).at(b);
  yylval.cpp_string = new std::string(lastComm);
  return WORD;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 169 "shell.l"
{
  std::string y = std::string(yytext);
  std::string str1 = "";
  std::string str2 = "";
  for(int i = 0; i < y.size(); i++){
    if(y[i] == '$'){
      if(y[i+1] == '{'){
        i = i+2;
        while(y[i] != '}'){
          str2.append(y, i, 1);
          i++;
        }
        //printf("val %s\n",str2.c_str());
        if(strcmp(str2.c_str(), "SHELL") == 0){
          char buff[100];
          char * pat = realpath(p.c_str(),buff);
//          printf("path: %s\n", pat);
          yylval.cpp_string = new std::string(pat);
          return WORD;
        }
        char * path = getenv(str2.c_str());
        //sleep(1);
        str1.append(path);
        str2.erase();

      }
      //str1[i] = y[i];
    }else{
      str1.append(y,i,1);
    }
  }
//  str1[str1.size()-1] = y[y.size()-1];
  yylval.cpp_string = new std::string(str1);
  return WORD;
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 205 "shell.l"
{ /*regex for subshells*/
  //parse: remove $()
  std::string cmdstr = std::string(yytext);
  if(cmdstr[0] == '$'){
    //handle $()
    cmdstr = cmdstr.substr(2,cmdstr.size()-3);
    cmdstr.append("\nexit\n");

  }

//char *cmd = const_cast<char*> (cmdstr.c_str());
  int tmpin = dup(0);
  int tmpout = dup(1);
  //create 2 pipes, pipeIn and pipeOut
  int pipeIn[2];
  pipe(pipeIn);
  int pipeOut[2];
  pipe(pipeOut);
  
  dup2(pipeIn[0], 0);
  dup2(pipeOut[1], 1);
  close(pipeIn[0]);
  close(pipeOut[1]);
  
  write(pipeIn[1], cmdstr.c_str(), cmdstr.size());
  close(pipeIn[1]);
  //create child process
  int pid = fork();
  //redirecting input and output
  if(pid == 0){
    //call execvp to run command from subshell?
    char ** list = new char*[2];
    list[0] =(char*) "/proc/self/exe";
    list[1] = NULL;
    execvp(list[0], list);
//    exit(1);
  }
  waitpid(pid, NULL, 0);
  dup2(tmpin, 0);
	dup2(tmpout, 1);
	close(tmpin);
	close(tmpout);  
  //read from pipeOut[0] and writes to buffer
  char* buffer = new char[4096];
  int r = read(pipeOut[0], buffer, 4096);
  for(int j = r-1; j >= 0; --j) {	
		 if (buffer[j] == '\n') {  //if \n then put a space
       buffer[j] = '\t';
     }
    myunputc(buffer[j]);
	}
  close(pipeOut[0]);
  delete buffer;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 260 "shell.l"
{ /*quotations*/
  std::string cmd (yytext);
  yylval.cpp_string = new std::string(cmd.substr(1,cmd.length()-2));
  return WORD;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 267 "shell.l"
{ /*escape seq*/
  char * str = strdup(yytext); //saving command
	char * newstr = (char*) malloc (100);//allocating space for new parsed command

	int i = 0;
	while (*str){//using pointer to traverse through command
		if (*str == '\\'){
			if (*(str+1) == '\\'){
				str = str +2;
				newstr[i] = '\\';
			}else{
				newstr[i] = *(++str);
			}
		}else{
			newstr[i] = *str;
		}
		str++;
    i++;
	}
	newstr[i] = '\0';

  yylval.cpp_string = new std::string(newstr);
	return WORD;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 292 "shell.l"
{
  /* Assume that file names have only alpha chars */
   yylval.cpp_string = new std::string(yytext);
   return WORD;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 298 "shell.l"
ECHO;
	YY_BREAK
#line 2887 "lex.yy.cc"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 452 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 452 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 451);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	if ( c == '\n' )
		
    yylineno++;
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    /* We do not touch yylineno unless the option is enabled. */
    yylineno =  1;
    
    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 298 "shell.l"
